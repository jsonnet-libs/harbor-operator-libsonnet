{
  local d = (import 'doc-util/main.libsonnet'),
  '#':: d.pkg(name='harborCluster', url='', help='"HarborCluster is the Schema for the harborclusters API."'),
  '#metadata':: d.obj(help='"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create."'),
  metadata: {
    '#withAnnotations':: d.fn(help='"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations"', args=[d.arg(name='annotations', type=d.T.object)]),
    withAnnotations(annotations): { metadata+: { annotations: annotations } },
    '#withAnnotationsMixin':: d.fn(help='"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
    withAnnotationsMixin(annotations): { metadata+: { annotations+: annotations } },
    '#withClusterName':: d.fn(help='"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request."', args=[d.arg(name='clusterName', type=d.T.string)]),
    withClusterName(clusterName): { metadata+: { clusterName: clusterName } },
    '#withCreationTimestamp':: d.fn(help='"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers."', args=[d.arg(name='creationTimestamp', type=d.T.string)]),
    withCreationTimestamp(creationTimestamp): { metadata+: { creationTimestamp: creationTimestamp } },
    '#withDeletionGracePeriodSeconds':: d.fn(help='"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only."', args=[d.arg(name='deletionGracePeriodSeconds', type=d.T.integer)]),
    withDeletionGracePeriodSeconds(deletionGracePeriodSeconds): { metadata+: { deletionGracePeriodSeconds: deletionGracePeriodSeconds } },
    '#withDeletionTimestamp':: d.fn(help='"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers."', args=[d.arg(name='deletionTimestamp', type=d.T.string)]),
    withDeletionTimestamp(deletionTimestamp): { metadata+: { deletionTimestamp: deletionTimestamp } },
    '#withFinalizers':: d.fn(help='"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list."', args=[d.arg(name='finalizers', type=d.T.array)]),
    withFinalizers(finalizers): { metadata+: { finalizers: if std.isArray(v=finalizers) then finalizers else [finalizers] } },
    '#withFinalizersMixin':: d.fn(help='"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='finalizers', type=d.T.array)]),
    withFinalizersMixin(finalizers): { metadata+: { finalizers+: if std.isArray(v=finalizers) then finalizers else [finalizers] } },
    '#withGenerateName':: d.fn(help='"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency"', args=[d.arg(name='generateName', type=d.T.string)]),
    withGenerateName(generateName): { metadata+: { generateName: generateName } },
    '#withGeneration':: d.fn(help='"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only."', args=[d.arg(name='generation', type=d.T.integer)]),
    withGeneration(generation): { metadata+: { generation: generation } },
    '#withLabels':: d.fn(help='"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels"', args=[d.arg(name='labels', type=d.T.object)]),
    withLabels(labels): { metadata+: { labels: labels } },
    '#withLabelsMixin':: d.fn(help='"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
    withLabelsMixin(labels): { metadata+: { labels+: labels } },
    '#withName':: d.fn(help='"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names"', args=[d.arg(name='name', type=d.T.string)]),
    withName(name): { metadata+: { name: name } },
    '#withNamespace':: d.fn(help='"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\"default\\" namespace, but \\"default\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces"', args=[d.arg(name='namespace', type=d.T.string)]),
    withNamespace(namespace): { metadata+: { namespace: namespace } },
    '#withOwnerReferences':: d.fn(help='"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller."', args=[d.arg(name='ownerReferences', type=d.T.array)]),
    withOwnerReferences(ownerReferences): { metadata+: { ownerReferences: if std.isArray(v=ownerReferences) then ownerReferences else [ownerReferences] } },
    '#withOwnerReferencesMixin':: d.fn(help='"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='ownerReferences', type=d.T.array)]),
    withOwnerReferencesMixin(ownerReferences): { metadata+: { ownerReferences+: if std.isArray(v=ownerReferences) then ownerReferences else [ownerReferences] } },
    '#withResourceVersion':: d.fn(help='"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency"', args=[d.arg(name='resourceVersion', type=d.T.string)]),
    withResourceVersion(resourceVersion): { metadata+: { resourceVersion: resourceVersion } },
    '#withSelfLink':: d.fn(help='"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release."', args=[d.arg(name='selfLink', type=d.T.string)]),
    withSelfLink(selfLink): { metadata+: { selfLink: selfLink } },
    '#withUid':: d.fn(help='"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"', args=[d.arg(name='uid', type=d.T.string)]),
    withUid(uid): { metadata+: { uid: uid } },
  },
  '#new':: d.fn(help='new returns an instance of HarborCluster', args=[d.arg(name='name', type=d.T.string)]),
  new(name): {
    apiVersion: 'goharbor.io/v1beta1',
    kind: 'HarborCluster',
  } + self.metadata.withName(name=name),
  '#spec':: d.obj(help='"HarborClusterSpec defines the desired state of HarborCluster."'),
  spec: {
    '#cache':: d.obj(help='"Cache configuration for in-cluster cache services"'),
    cache: {
      '#spec':: d.obj(help='"RedisSpec is the specification of redis."'),
      spec: {
        '#redis':: d.obj(help=''),
        redis: {
          '#withCertificateRef':: d.fn(help='"Secret containing the client certificate to authenticate with."', args=[d.arg(name='certificateRef', type=d.T.string)]),
          withCertificateRef(certificateRef): { spec+: { cache+: { spec+: { redis+: { certificateRef: certificateRef } } } } },
          '#withHost':: d.fn(help='"Server hostname."', args=[d.arg(name='host', type=d.T.string)]),
          withHost(host): { spec+: { cache+: { spec+: { redis+: { host: host } } } } },
          '#withPasswordRef':: d.fn(help='"Secret containing the password to use when connecting to the server."', args=[d.arg(name='passwordRef', type=d.T.string)]),
          withPasswordRef(passwordRef): { spec+: { cache+: { spec+: { redis+: { passwordRef: passwordRef } } } } },
          '#withPort':: d.fn(help='"Server port."', args=[d.arg(name='port', type=d.T.integer)]),
          withPort(port): { spec+: { cache+: { spec+: { redis+: { port: port } } } } },
          '#withSentinelMasterSet':: d.fn(help='"for Sentinel MasterSet."', args=[d.arg(name='sentinelMasterSet', type=d.T.string)]),
          withSentinelMasterSet(sentinelMasterSet): { spec+: { cache+: { spec+: { redis+: { sentinelMasterSet: sentinelMasterSet } } } } },
        },
        '#redisFailover':: d.obj(help=''),
        redisFailover: {
          '#imagePullSecrets':: d.obj(help=''),
          imagePullSecrets: {
            '#withName':: d.fn(help='"Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?"', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { name: name },
          },
          '#sentinel':: d.obj(help='"Sentinel is the configuration of the redis sentinel."'),
          sentinel: {
            '#withReplicas':: d.fn(help='"Replicas is the instance number of redis sentinel."', args=[d.arg(name='replicas', type=d.T.integer)]),
            withReplicas(replicas): { spec+: { cache+: { spec+: { redisFailover+: { sentinel+: { replicas: replicas } } } } } },
          },
          '#server':: d.obj(help='"Server is the configuration of the redis server."'),
          server: {
            '#resources':: d.obj(help='"Resources is the resources requests and limits for redis."'),
            resources: {
              '#withLimits':: d.fn(help='"Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/"', args=[d.arg(name='limits', type=d.T.object)]),
              withLimits(limits): { spec+: { cache+: { spec+: { redisFailover+: { server+: { resources+: { limits: limits } } } } } } },
              '#withLimitsMixin':: d.fn(help='"Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='limits', type=d.T.object)]),
              withLimitsMixin(limits): { spec+: { cache+: { spec+: { redisFailover+: { server+: { resources+: { limits+: limits } } } } } } },
              '#withRequests':: d.fn(help='"Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/"', args=[d.arg(name='requests', type=d.T.object)]),
              withRequests(requests): { spec+: { cache+: { spec+: { redisFailover+: { server+: { resources+: { requests: requests } } } } } } },
              '#withRequestsMixin':: d.fn(help='"Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='requests', type=d.T.object)]),
              withRequestsMixin(requests): { spec+: { cache+: { spec+: { redisFailover+: { server+: { resources+: { requests+: requests } } } } } } },
            },
            '#withReplicas':: d.fn(help='"Replicas is the instance number of redis server."', args=[d.arg(name='replicas', type=d.T.integer)]),
            withReplicas(replicas): { spec+: { cache+: { spec+: { redisFailover+: { server+: { replicas: replicas } } } } } },
            '#withStorage':: d.fn(help='"Storage is the size of the redis storage."', args=[d.arg(name='storage', type=d.T.string)]),
            withStorage(storage): { spec+: { cache+: { spec+: { redisFailover+: { server+: { storage: storage } } } } } },
            '#withStorageClassName':: d.fn(help='"StorageClassName is the storage class name of the redis storage."', args=[d.arg(name='storageClassName', type=d.T.string)]),
            withStorageClassName(storageClassName): { spec+: { cache+: { spec+: { redisFailover+: { server+: { storageClassName: storageClassName } } } } } },
          },
          '#withImage':: d.fn(help='"Image name for the component."', args=[d.arg(name='image', type=d.T.string)]),
          withImage(image): { spec+: { cache+: { spec+: { redisFailover+: { image: image } } } } },
          '#withImagePullPolicy':: d.fn(help='"Image pull policy. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images"', args=[d.arg(name='imagePullPolicy', type=d.T.string)]),
          withImagePullPolicy(imagePullPolicy): { spec+: { cache+: { spec+: { redisFailover+: { imagePullPolicy: imagePullPolicy } } } } },
          '#withImagePullSecrets':: d.fn(help='', args=[d.arg(name='imagePullSecrets', type=d.T.array)]),
          withImagePullSecrets(imagePullSecrets): { spec+: { cache+: { spec+: { redisFailover+: { imagePullSecrets: if std.isArray(v=imagePullSecrets) then imagePullSecrets else [imagePullSecrets] } } } } },
          '#withImagePullSecretsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='imagePullSecrets', type=d.T.array)]),
          withImagePullSecretsMixin(imagePullSecrets): { spec+: { cache+: { spec+: { redisFailover+: { imagePullSecrets+: if std.isArray(v=imagePullSecrets) then imagePullSecrets else [imagePullSecrets] } } } } },
          '#withOperatorVersion':: d.fn(help='', args=[d.arg(name='operatorVersion', type=d.T.string)]),
          withOperatorVersion(operatorVersion): { spec+: { cache+: { spec+: { redisFailover+: { operatorVersion: operatorVersion } } } } },
        },
      },
      '#withKind':: d.fn(help='"Set the kind of cache service to be used. Only support Redis now."', args=[d.arg(name='kind', type=d.T.string)]),
      withKind(kind): { spec+: { cache+: { kind: kind } } },
    },
    '#chartmuseum':: d.obj(help=''),
    chartmuseum: {
      '#imagePullSecrets':: d.obj(help=''),
      imagePullSecrets: {
        '#withName':: d.fn(help='"Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?"', args=[d.arg(name='name', type=d.T.string)]),
        withName(name): { name: name },
      },
      '#resources':: d.obj(help='"Compute Resources required by this component. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/"'),
      resources: {
        '#withLimits':: d.fn(help='"Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/"', args=[d.arg(name='limits', type=d.T.object)]),
        withLimits(limits): { spec+: { chartmuseum+: { resources+: { limits: limits } } } },
        '#withLimitsMixin':: d.fn(help='"Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='limits', type=d.T.object)]),
        withLimitsMixin(limits): { spec+: { chartmuseum+: { resources+: { limits+: limits } } } },
        '#withRequests':: d.fn(help='"Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/"', args=[d.arg(name='requests', type=d.T.object)]),
        withRequests(requests): { spec+: { chartmuseum+: { resources+: { requests: requests } } } },
        '#withRequestsMixin':: d.fn(help='"Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='requests', type=d.T.object)]),
        withRequestsMixin(requests): { spec+: { chartmuseum+: { resources+: { requests+: requests } } } },
      },
      '#tolerations':: d.obj(help="\"If specified, the pod's tolerations.\""),
      tolerations: {
        '#withEffect':: d.fn(help='"Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute."', args=[d.arg(name='effect', type=d.T.string)]),
        withEffect(effect): { effect: effect },
        '#withKey':: d.fn(help='"Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys."', args=[d.arg(name='key', type=d.T.string)]),
        withKey(key): { key: key },
        '#withOperator':: d.fn(help="\"Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.\"", args=[d.arg(name='operator', type=d.T.string)]),
        withOperator(operator): { operator: operator },
        '#withTolerationSeconds':: d.fn(help='"TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system."', args=[d.arg(name='tolerationSeconds', type=d.T.integer)]),
        withTolerationSeconds(tolerationSeconds): { tolerationSeconds: tolerationSeconds },
        '#withValue':: d.fn(help='"Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string."', args=[d.arg(name='value', type=d.T.string)]),
        withValue(value): { value: value },
      },
      '#withAbsoluteUrl':: d.fn(help='"Harbor defaults ChartMuseum to returning relative urls, if you want using absolute url you should enable it"', args=[d.arg(name='absoluteUrl', type=d.T.boolean)]),
      withAbsoluteUrl(absoluteUrl): { spec+: { chartmuseum+: { absoluteUrl: absoluteUrl } } },
      '#withCertificateRefs':: d.fn(help='', args=[d.arg(name='certificateRefs', type=d.T.array)]),
      withCertificateRefs(certificateRefs): { spec+: { chartmuseum+: { certificateRefs: if std.isArray(v=certificateRefs) then certificateRefs else [certificateRefs] } } },
      '#withCertificateRefsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='certificateRefs', type=d.T.array)]),
      withCertificateRefsMixin(certificateRefs): { spec+: { chartmuseum+: { certificateRefs+: if std.isArray(v=certificateRefs) then certificateRefs else [certificateRefs] } } },
      '#withImage':: d.fn(help='"Image name for the component."', args=[d.arg(name='image', type=d.T.string)]),
      withImage(image): { spec+: { chartmuseum+: { image: image } } },
      '#withImagePullPolicy':: d.fn(help='"Image pull policy. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images"', args=[d.arg(name='imagePullPolicy', type=d.T.string)]),
      withImagePullPolicy(imagePullPolicy): { spec+: { chartmuseum+: { imagePullPolicy: imagePullPolicy } } },
      '#withImagePullSecrets':: d.fn(help='', args=[d.arg(name='imagePullSecrets', type=d.T.array)]),
      withImagePullSecrets(imagePullSecrets): { spec+: { chartmuseum+: { imagePullSecrets: if std.isArray(v=imagePullSecrets) then imagePullSecrets else [imagePullSecrets] } } },
      '#withImagePullSecretsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='imagePullSecrets', type=d.T.array)]),
      withImagePullSecretsMixin(imagePullSecrets): { spec+: { chartmuseum+: { imagePullSecrets+: if std.isArray(v=imagePullSecrets) then imagePullSecrets else [imagePullSecrets] } } },
      '#withNodeSelector':: d.fn(help="\"NodeSelector is a selector which must be true for the component to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\"", args=[d.arg(name='nodeSelector', type=d.T.object)]),
      withNodeSelector(nodeSelector): { spec+: { chartmuseum+: { nodeSelector: nodeSelector } } },
      '#withNodeSelectorMixin':: d.fn(help="\"NodeSelector is a selector which must be true for the component to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\"\n\n**Note:** This function appends passed data to existing values", args=[d.arg(name='nodeSelector', type=d.T.object)]),
      withNodeSelectorMixin(nodeSelector): { spec+: { chartmuseum+: { nodeSelector+: nodeSelector } } },
      '#withReplicas':: d.fn(help='"Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller"', args=[d.arg(name='replicas', type=d.T.integer)]),
      withReplicas(replicas): { spec+: { chartmuseum+: { replicas: replicas } } },
      '#withServiceAccountName':: d.fn(help='"ServiceAccountName is the name of the ServiceAccount to use to run this component. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/"', args=[d.arg(name='serviceAccountName', type=d.T.string)]),
      withServiceAccountName(serviceAccountName): { spec+: { chartmuseum+: { serviceAccountName: serviceAccountName } } },
      '#withTolerations':: d.fn(help="\"If specified, the pod's tolerations.\"", args=[d.arg(name='tolerations', type=d.T.array)]),
      withTolerations(tolerations): { spec+: { chartmuseum+: { tolerations: if std.isArray(v=tolerations) then tolerations else [tolerations] } } },
      '#withTolerationsMixin':: d.fn(help="\"If specified, the pod's tolerations.\"\n\n**Note:** This function appends passed data to existing values", args=[d.arg(name='tolerations', type=d.T.array)]),
      withTolerationsMixin(tolerations): { spec+: { chartmuseum+: { tolerations+: if std.isArray(v=tolerations) then tolerations else [tolerations] } } },
    },
    '#core':: d.obj(help=''),
    core: {
      '#imagePullSecrets':: d.obj(help=''),
      imagePullSecrets: {
        '#withName':: d.fn(help='"Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?"', args=[d.arg(name='name', type=d.T.string)]),
        withName(name): { name: name },
      },
      '#metrics':: d.obj(help=''),
      metrics: {
        '#withEnabled':: d.fn(help='', args=[d.arg(name='enabled', type=d.T.boolean)]),
        withEnabled(enabled): { spec+: { core+: { metrics+: { enabled: enabled } } } },
        '#withPath':: d.fn(help='"The path of the metrics."', args=[d.arg(name='path', type=d.T.string)]),
        withPath(path): { spec+: { core+: { metrics+: { path: path } } } },
        '#withPort':: d.fn(help='"The port of the metrics."', args=[d.arg(name='port', type=d.T.integer)]),
        withPort(port): { spec+: { core+: { metrics+: { port: port } } } },
      },
      '#resources':: d.obj(help='"Compute Resources required by this component. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/"'),
      resources: {
        '#withLimits':: d.fn(help='"Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/"', args=[d.arg(name='limits', type=d.T.object)]),
        withLimits(limits): { spec+: { core+: { resources+: { limits: limits } } } },
        '#withLimitsMixin':: d.fn(help='"Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='limits', type=d.T.object)]),
        withLimitsMixin(limits): { spec+: { core+: { resources+: { limits+: limits } } } },
        '#withRequests':: d.fn(help='"Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/"', args=[d.arg(name='requests', type=d.T.object)]),
        withRequests(requests): { spec+: { core+: { resources+: { requests: requests } } } },
        '#withRequestsMixin':: d.fn(help='"Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='requests', type=d.T.object)]),
        withRequestsMixin(requests): { spec+: { core+: { resources+: { requests+: requests } } } },
      },
      '#tokenIssuer':: d.obj(help='"ObjectReference is a reference to an object with a given name, kind and group."'),
      tokenIssuer: {
        '#withGroup':: d.fn(help='"Group of the resource being referred to."', args=[d.arg(name='group', type=d.T.string)]),
        withGroup(group): { spec+: { core+: { tokenIssuer+: { group: group } } } },
        '#withKind':: d.fn(help='"Kind of the resource being referred to."', args=[d.arg(name='kind', type=d.T.string)]),
        withKind(kind): { spec+: { core+: { tokenIssuer+: { kind: kind } } } },
        '#withName':: d.fn(help='"Name of the resource being referred to."', args=[d.arg(name='name', type=d.T.string)]),
        withName(name): { spec+: { core+: { tokenIssuer+: { name: name } } } },
      },
      '#tolerations':: d.obj(help="\"If specified, the pod's tolerations.\""),
      tolerations: {
        '#withEffect':: d.fn(help='"Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute."', args=[d.arg(name='effect', type=d.T.string)]),
        withEffect(effect): { effect: effect },
        '#withKey':: d.fn(help='"Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys."', args=[d.arg(name='key', type=d.T.string)]),
        withKey(key): { key: key },
        '#withOperator':: d.fn(help="\"Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.\"", args=[d.arg(name='operator', type=d.T.string)]),
        withOperator(operator): { operator: operator },
        '#withTolerationSeconds':: d.fn(help='"TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system."', args=[d.arg(name='tolerationSeconds', type=d.T.integer)]),
        withTolerationSeconds(tolerationSeconds): { tolerationSeconds: tolerationSeconds },
        '#withValue':: d.fn(help='"Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string."', args=[d.arg(name='value', type=d.T.string)]),
        withValue(value): { value: value },
      },
      '#withCertificateRefs':: d.fn(help='', args=[d.arg(name='certificateRefs', type=d.T.array)]),
      withCertificateRefs(certificateRefs): { spec+: { core+: { certificateRefs: if std.isArray(v=certificateRefs) then certificateRefs else [certificateRefs] } } },
      '#withCertificateRefsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='certificateRefs', type=d.T.array)]),
      withCertificateRefsMixin(certificateRefs): { spec+: { core+: { certificateRefs+: if std.isArray(v=certificateRefs) then certificateRefs else [certificateRefs] } } },
      '#withImage':: d.fn(help='"Image name for the component."', args=[d.arg(name='image', type=d.T.string)]),
      withImage(image): { spec+: { core+: { image: image } } },
      '#withImagePullPolicy':: d.fn(help='"Image pull policy. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images"', args=[d.arg(name='imagePullPolicy', type=d.T.string)]),
      withImagePullPolicy(imagePullPolicy): { spec+: { core+: { imagePullPolicy: imagePullPolicy } } },
      '#withImagePullSecrets':: d.fn(help='', args=[d.arg(name='imagePullSecrets', type=d.T.array)]),
      withImagePullSecrets(imagePullSecrets): { spec+: { core+: { imagePullSecrets: if std.isArray(v=imagePullSecrets) then imagePullSecrets else [imagePullSecrets] } } },
      '#withImagePullSecretsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='imagePullSecrets', type=d.T.array)]),
      withImagePullSecretsMixin(imagePullSecrets): { spec+: { core+: { imagePullSecrets+: if std.isArray(v=imagePullSecrets) then imagePullSecrets else [imagePullSecrets] } } },
      '#withNodeSelector':: d.fn(help="\"NodeSelector is a selector which must be true for the component to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\"", args=[d.arg(name='nodeSelector', type=d.T.object)]),
      withNodeSelector(nodeSelector): { spec+: { core+: { nodeSelector: nodeSelector } } },
      '#withNodeSelectorMixin':: d.fn(help="\"NodeSelector is a selector which must be true for the component to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\"\n\n**Note:** This function appends passed data to existing values", args=[d.arg(name='nodeSelector', type=d.T.object)]),
      withNodeSelectorMixin(nodeSelector): { spec+: { core+: { nodeSelector+: nodeSelector } } },
      '#withReplicas':: d.fn(help='"Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller"', args=[d.arg(name='replicas', type=d.T.integer)]),
      withReplicas(replicas): { spec+: { core+: { replicas: replicas } } },
      '#withServiceAccountName':: d.fn(help='"ServiceAccountName is the name of the ServiceAccount to use to run this component. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/"', args=[d.arg(name='serviceAccountName', type=d.T.string)]),
      withServiceAccountName(serviceAccountName): { spec+: { core+: { serviceAccountName: serviceAccountName } } },
      '#withTolerations':: d.fn(help="\"If specified, the pod's tolerations.\"", args=[d.arg(name='tolerations', type=d.T.array)]),
      withTolerations(tolerations): { spec+: { core+: { tolerations: if std.isArray(v=tolerations) then tolerations else [tolerations] } } },
      '#withTolerationsMixin':: d.fn(help="\"If specified, the pod's tolerations.\"\n\n**Note:** This function appends passed data to existing values", args=[d.arg(name='tolerations', type=d.T.array)]),
      withTolerationsMixin(tolerations): { spec+: { core+: { tolerations+: if std.isArray(v=tolerations) then tolerations else [tolerations] } } },
    },
    '#database':: d.obj(help='"Database configuration for in-cluster database service"'),
    database: {
      '#spec':: d.obj(help=''),
      spec: {
        '#postgresql':: d.obj(help=''),
        postgresql: {
          '#hosts':: d.obj(help=''),
          hosts: {
            '#withHost':: d.fn(help='"Name of host to connect to. If a host name begins with a slash, it specifies Unix-domain communication rather than TCP/IP communication; the value is the name of the directory in which the socket file is stored."', args=[d.arg(name='host', type=d.T.string)]),
            withHost(host): { host: host },
            '#withPort':: d.fn(help='"Port number to connect to at the server host, or socket file name extension for Unix-domain connections. Zero, specifies the default port number established when PostgreSQL was built."', args=[d.arg(name='port', type=d.T.integer)]),
            withPort(port): { port: port },
          },
          '#withHosts':: d.fn(help='', args=[d.arg(name='hosts', type=d.T.array)]),
          withHosts(hosts): { spec+: { database+: { spec+: { postgresql+: { hosts: if std.isArray(v=hosts) then hosts else [hosts] } } } } },
          '#withHostsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='hosts', type=d.T.array)]),
          withHostsMixin(hosts): { spec+: { database+: { spec+: { postgresql+: { hosts+: if std.isArray(v=hosts) then hosts else [hosts] } } } } },
          '#withPasswordRef':: d.fn(help='"Secret containing the password to be used if the server demands password authentication."', args=[d.arg(name='passwordRef', type=d.T.string)]),
          withPasswordRef(passwordRef): { spec+: { database+: { spec+: { postgresql+: { passwordRef: passwordRef } } } } },
          '#withPrefix':: d.fn(help='', args=[d.arg(name='prefix', type=d.T.string)]),
          withPrefix(prefix): { spec+: { database+: { spec+: { postgresql+: { prefix: prefix } } } } },
          '#withSslMode':: d.fn(help='"PostgreSQL has native support for using SSL connections to encrypt client/server communications for increased security."', args=[d.arg(name='sslMode', type=d.T.string)]),
          withSslMode(sslMode): { spec+: { database+: { spec+: { postgresql+: { sslMode: sslMode } } } } },
          '#withUsername':: d.fn(help='"PostgreSQL user name to connect as. Defaults to be the same as the operating system name of the user running the application."', args=[d.arg(name='username', type=d.T.string)]),
          withUsername(username): { spec+: { database+: { spec+: { postgresql+: { username: username } } } } },
        },
        '#zlandoPostgreSql':: d.obj(help='"ZlandoPostgreSQL"'),
        zlandoPostgreSql: {
          '#imagePullSecrets':: d.obj(help=''),
          imagePullSecrets: {
            '#withName':: d.fn(help='"Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?"', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { name: name },
          },
          '#resources':: d.obj(help='"ResourceRequirements describes the compute resource requirements."'),
          resources: {
            '#withLimits':: d.fn(help='"Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/"', args=[d.arg(name='limits', type=d.T.object)]),
            withLimits(limits): { spec+: { database+: { spec+: { zlandoPostgreSql+: { resources+: { limits: limits } } } } } },
            '#withLimitsMixin':: d.fn(help='"Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='limits', type=d.T.object)]),
            withLimitsMixin(limits): { spec+: { database+: { spec+: { zlandoPostgreSql+: { resources+: { limits+: limits } } } } } },
            '#withRequests':: d.fn(help='"Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/"', args=[d.arg(name='requests', type=d.T.object)]),
            withRequests(requests): { spec+: { database+: { spec+: { zlandoPostgreSql+: { resources+: { requests: requests } } } } } },
            '#withRequestsMixin':: d.fn(help='"Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='requests', type=d.T.object)]),
            withRequestsMixin(requests): { spec+: { database+: { spec+: { zlandoPostgreSql+: { resources+: { requests+: requests } } } } } },
          },
          '#withConnectTimeout':: d.fn(help='', args=[d.arg(name='connectTimeout', type=d.T.integer)]),
          withConnectTimeout(connectTimeout): { spec+: { database+: { spec+: { zlandoPostgreSql+: { connectTimeout: connectTimeout } } } } },
          '#withImage':: d.fn(help='"Image name for the component."', args=[d.arg(name='image', type=d.T.string)]),
          withImage(image): { spec+: { database+: { spec+: { zlandoPostgreSql+: { image: image } } } } },
          '#withImagePullPolicy':: d.fn(help='"Image pull policy. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images"', args=[d.arg(name='imagePullPolicy', type=d.T.string)]),
          withImagePullPolicy(imagePullPolicy): { spec+: { database+: { spec+: { zlandoPostgreSql+: { imagePullPolicy: imagePullPolicy } } } } },
          '#withImagePullSecrets':: d.fn(help='', args=[d.arg(name='imagePullSecrets', type=d.T.array)]),
          withImagePullSecrets(imagePullSecrets): { spec+: { database+: { spec+: { zlandoPostgreSql+: { imagePullSecrets: if std.isArray(v=imagePullSecrets) then imagePullSecrets else [imagePullSecrets] } } } } },
          '#withImagePullSecretsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='imagePullSecrets', type=d.T.array)]),
          withImagePullSecretsMixin(imagePullSecrets): { spec+: { database+: { spec+: { zlandoPostgreSql+: { imagePullSecrets+: if std.isArray(v=imagePullSecrets) then imagePullSecrets else [imagePullSecrets] } } } } },
          '#withOperatorVersion':: d.fn(help='', args=[d.arg(name='operatorVersion', type=d.T.string)]),
          withOperatorVersion(operatorVersion): { spec+: { database+: { spec+: { zlandoPostgreSql+: { operatorVersion: operatorVersion } } } } },
          '#withReplicas':: d.fn(help='', args=[d.arg(name='replicas', type=d.T.integer)]),
          withReplicas(replicas): { spec+: { database+: { spec+: { zlandoPostgreSql+: { replicas: replicas } } } } },
          '#withSslConfig':: d.fn(help='', args=[d.arg(name='sslConfig', type=d.T.string)]),
          withSslConfig(sslConfig): { spec+: { database+: { spec+: { zlandoPostgreSql+: { sslConfig: sslConfig } } } } },
          '#withStorage':: d.fn(help='', args=[d.arg(name='storage', type=d.T.string)]),
          withStorage(storage): { spec+: { database+: { spec+: { zlandoPostgreSql+: { storage: storage } } } } },
          '#withStorageClassName':: d.fn(help='', args=[d.arg(name='storageClassName', type=d.T.string)]),
          withStorageClassName(storageClassName): { spec+: { database+: { spec+: { zlandoPostgreSql+: { storageClassName: storageClassName } } } } },
        },
      },
      '#withKind':: d.fn(help='"Set the kind of which database service to be used, Only support PostgreSQL now."', args=[d.arg(name='kind', type=d.T.string)]),
      withKind(kind): { spec+: { database+: { kind: kind } } },
    },
    '#exporter':: d.obj(help=''),
    exporter: {
      '#cache':: d.obj(help=''),
      cache: {
        '#withCleanInterval':: d.fn(help='"The interval to clean the cache info from the database and core."', args=[d.arg(name='cleanInterval', type=d.T.string)]),
        withCleanInterval(cleanInterval): { spec+: { exporter+: { cache+: { cleanInterval: cleanInterval } } } },
        '#withDuration':: d.fn(help='"The duration to cache info from the database and core."', args=[d.arg(name='duration', type=d.T.string)]),
        withDuration(duration): { spec+: { exporter+: { cache+: { duration: duration } } } },
      },
      '#imagePullSecrets':: d.obj(help=''),
      imagePullSecrets: {
        '#withName':: d.fn(help='"Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?"', args=[d.arg(name='name', type=d.T.string)]),
        withName(name): { name: name },
      },
      '#resources':: d.obj(help='"Compute Resources required by this component. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/"'),
      resources: {
        '#withLimits':: d.fn(help='"Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/"', args=[d.arg(name='limits', type=d.T.object)]),
        withLimits(limits): { spec+: { exporter+: { resources+: { limits: limits } } } },
        '#withLimitsMixin':: d.fn(help='"Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='limits', type=d.T.object)]),
        withLimitsMixin(limits): { spec+: { exporter+: { resources+: { limits+: limits } } } },
        '#withRequests':: d.fn(help='"Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/"', args=[d.arg(name='requests', type=d.T.object)]),
        withRequests(requests): { spec+: { exporter+: { resources+: { requests: requests } } } },
        '#withRequestsMixin':: d.fn(help='"Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='requests', type=d.T.object)]),
        withRequestsMixin(requests): { spec+: { exporter+: { resources+: { requests+: requests } } } },
      },
      '#tolerations':: d.obj(help="\"If specified, the pod's tolerations.\""),
      tolerations: {
        '#withEffect':: d.fn(help='"Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute."', args=[d.arg(name='effect', type=d.T.string)]),
        withEffect(effect): { effect: effect },
        '#withKey':: d.fn(help='"Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys."', args=[d.arg(name='key', type=d.T.string)]),
        withKey(key): { key: key },
        '#withOperator':: d.fn(help="\"Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.\"", args=[d.arg(name='operator', type=d.T.string)]),
        withOperator(operator): { operator: operator },
        '#withTolerationSeconds':: d.fn(help='"TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system."', args=[d.arg(name='tolerationSeconds', type=d.T.integer)]),
        withTolerationSeconds(tolerationSeconds): { tolerationSeconds: tolerationSeconds },
        '#withValue':: d.fn(help='"Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string."', args=[d.arg(name='value', type=d.T.string)]),
        withValue(value): { value: value },
      },
      '#withImage':: d.fn(help='"Image name for the component."', args=[d.arg(name='image', type=d.T.string)]),
      withImage(image): { spec+: { exporter+: { image: image } } },
      '#withImagePullPolicy':: d.fn(help='"Image pull policy. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images"', args=[d.arg(name='imagePullPolicy', type=d.T.string)]),
      withImagePullPolicy(imagePullPolicy): { spec+: { exporter+: { imagePullPolicy: imagePullPolicy } } },
      '#withImagePullSecrets':: d.fn(help='', args=[d.arg(name='imagePullSecrets', type=d.T.array)]),
      withImagePullSecrets(imagePullSecrets): { spec+: { exporter+: { imagePullSecrets: if std.isArray(v=imagePullSecrets) then imagePullSecrets else [imagePullSecrets] } } },
      '#withImagePullSecretsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='imagePullSecrets', type=d.T.array)]),
      withImagePullSecretsMixin(imagePullSecrets): { spec+: { exporter+: { imagePullSecrets+: if std.isArray(v=imagePullSecrets) then imagePullSecrets else [imagePullSecrets] } } },
      '#withNodeSelector':: d.fn(help="\"NodeSelector is a selector which must be true for the component to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\"", args=[d.arg(name='nodeSelector', type=d.T.object)]),
      withNodeSelector(nodeSelector): { spec+: { exporter+: { nodeSelector: nodeSelector } } },
      '#withNodeSelectorMixin':: d.fn(help="\"NodeSelector is a selector which must be true for the component to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\"\n\n**Note:** This function appends passed data to existing values", args=[d.arg(name='nodeSelector', type=d.T.object)]),
      withNodeSelectorMixin(nodeSelector): { spec+: { exporter+: { nodeSelector+: nodeSelector } } },
      '#withPath':: d.fn(help='"The metrics path of the exporter."', args=[d.arg(name='path', type=d.T.string)]),
      withPath(path): { spec+: { exporter+: { path: path } } },
      '#withPort':: d.fn(help='"The port of the exporter."', args=[d.arg(name='port', type=d.T.integer)]),
      withPort(port): { spec+: { exporter+: { port: port } } },
      '#withReplicas':: d.fn(help='"Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller"', args=[d.arg(name='replicas', type=d.T.integer)]),
      withReplicas(replicas): { spec+: { exporter+: { replicas: replicas } } },
      '#withServiceAccountName':: d.fn(help='"ServiceAccountName is the name of the ServiceAccount to use to run this component. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/"', args=[d.arg(name='serviceAccountName', type=d.T.string)]),
      withServiceAccountName(serviceAccountName): { spec+: { exporter+: { serviceAccountName: serviceAccountName } } },
      '#withTolerations':: d.fn(help="\"If specified, the pod's tolerations.\"", args=[d.arg(name='tolerations', type=d.T.array)]),
      withTolerations(tolerations): { spec+: { exporter+: { tolerations: if std.isArray(v=tolerations) then tolerations else [tolerations] } } },
      '#withTolerationsMixin':: d.fn(help="\"If specified, the pod's tolerations.\"\n\n**Note:** This function appends passed data to existing values", args=[d.arg(name='tolerations', type=d.T.array)]),
      withTolerationsMixin(tolerations): { spec+: { exporter+: { tolerations+: if std.isArray(v=tolerations) then tolerations else [tolerations] } } },
    },
    '#expose':: d.obj(help=''),
    expose: {
      '#core':: d.obj(help=''),
      core: {
        '#ingress':: d.obj(help=''),
        ingress: {
          '#withAnnotations':: d.fn(help='', args=[d.arg(name='annotations', type=d.T.object)]),
          withAnnotations(annotations): { spec+: { expose+: { core+: { ingress+: { annotations: annotations } } } } },
          '#withAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
          withAnnotationsMixin(annotations): { spec+: { expose+: { core+: { ingress+: { annotations+: annotations } } } } },
          '#withController':: d.fn(help='"Set to the type of ingress controller."', args=[d.arg(name='controller', type=d.T.string)]),
          withController(controller): { spec+: { expose+: { core+: { ingress+: { controller: controller } } } } },
          '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
          withHost(host): { spec+: { expose+: { core+: { ingress+: { host: host } } } } },
          '#withIngressClassName':: d.fn(help='', args=[d.arg(name='ingressClassName', type=d.T.string)]),
          withIngressClassName(ingressClassName): { spec+: { expose+: { core+: { ingress+: { ingressClassName: ingressClassName } } } } },
        },
        '#tls':: d.obj(help=''),
        tls: {
          '#withCertificateRef':: d.fn(help='', args=[d.arg(name='certificateRef', type=d.T.string)]),
          withCertificateRef(certificateRef): { spec+: { expose+: { core+: { tls+: { certificateRef: certificateRef } } } } },
        },
      },
      '#notary':: d.obj(help='"The ingress of the notary, required when notary component enabled."'),
      notary: {
        '#ingress':: d.obj(help=''),
        ingress: {
          '#withAnnotations':: d.fn(help='', args=[d.arg(name='annotations', type=d.T.object)]),
          withAnnotations(annotations): { spec+: { expose+: { notary+: { ingress+: { annotations: annotations } } } } },
          '#withAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
          withAnnotationsMixin(annotations): { spec+: { expose+: { notary+: { ingress+: { annotations+: annotations } } } } },
          '#withController':: d.fn(help='"Set to the type of ingress controller."', args=[d.arg(name='controller', type=d.T.string)]),
          withController(controller): { spec+: { expose+: { notary+: { ingress+: { controller: controller } } } } },
          '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
          withHost(host): { spec+: { expose+: { notary+: { ingress+: { host: host } } } } },
          '#withIngressClassName':: d.fn(help='', args=[d.arg(name='ingressClassName', type=d.T.string)]),
          withIngressClassName(ingressClassName): { spec+: { expose+: { notary+: { ingress+: { ingressClassName: ingressClassName } } } } },
        },
        '#tls':: d.obj(help=''),
        tls: {
          '#withCertificateRef':: d.fn(help='', args=[d.arg(name='certificateRef', type=d.T.string)]),
          withCertificateRef(certificateRef): { spec+: { expose+: { notary+: { tls+: { certificateRef: certificateRef } } } } },
        },
      },
    },
    '#imageSource':: d.obj(help=''),
    imageSource: {
      '#imagePullSecrets':: d.obj(help=''),
      imagePullSecrets: {
        '#withName':: d.fn(help='"Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?"', args=[d.arg(name='name', type=d.T.string)]),
        withName(name): { name: name },
      },
      '#withImagePullPolicy':: d.fn(help='"Image pull policy. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images"', args=[d.arg(name='imagePullPolicy', type=d.T.string)]),
      withImagePullPolicy(imagePullPolicy): { spec+: { imageSource+: { imagePullPolicy: imagePullPolicy } } },
      '#withImagePullSecrets':: d.fn(help='', args=[d.arg(name='imagePullSecrets', type=d.T.array)]),
      withImagePullSecrets(imagePullSecrets): { spec+: { imageSource+: { imagePullSecrets: if std.isArray(v=imagePullSecrets) then imagePullSecrets else [imagePullSecrets] } } },
      '#withImagePullSecretsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='imagePullSecrets', type=d.T.array)]),
      withImagePullSecretsMixin(imagePullSecrets): { spec+: { imageSource+: { imagePullSecrets+: if std.isArray(v=imagePullSecrets) then imagePullSecrets else [imagePullSecrets] } } },
      '#withRepository':: d.fn(help='"The default repository for the images of the components. eg docker.io/goharbor/"', args=[d.arg(name='repository', type=d.T.string)]),
      withRepository(repository): { spec+: { imageSource+: { repository: repository } } },
      '#withTagSuffix':: d.fn(help="\"The tag suffix for the images of the images of the components. eg '-patch1'\"", args=[d.arg(name='tagSuffix', type=d.T.string)]),
      withTagSuffix(tagSuffix): { spec+: { imageSource+: { tagSuffix: tagSuffix } } },
    },
    '#internalTLS':: d.obj(help=''),
    internalTLS: {
      '#withEnabled':: d.fn(help='', args=[d.arg(name='enabled', type=d.T.boolean)]),
      withEnabled(enabled): { spec+: { internalTLS+: { enabled: enabled } } },
    },
    '#jobservice':: d.obj(help=''),
    jobservice: {
      '#imagePullSecrets':: d.obj(help=''),
      imagePullSecrets: {
        '#withName':: d.fn(help='"Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?"', args=[d.arg(name='name', type=d.T.string)]),
        withName(name): { name: name },
      },
      '#metrics':: d.obj(help=''),
      metrics: {
        '#withEnabled':: d.fn(help='', args=[d.arg(name='enabled', type=d.T.boolean)]),
        withEnabled(enabled): { spec+: { jobservice+: { metrics+: { enabled: enabled } } } },
        '#withPath':: d.fn(help='"The path of the metrics."', args=[d.arg(name='path', type=d.T.string)]),
        withPath(path): { spec+: { jobservice+: { metrics+: { path: path } } } },
        '#withPort':: d.fn(help='"The port of the metrics."', args=[d.arg(name='port', type=d.T.integer)]),
        withPort(port): { spec+: { jobservice+: { metrics+: { port: port } } } },
      },
      '#resources':: d.obj(help='"Compute Resources required by this component. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/"'),
      resources: {
        '#withLimits':: d.fn(help='"Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/"', args=[d.arg(name='limits', type=d.T.object)]),
        withLimits(limits): { spec+: { jobservice+: { resources+: { limits: limits } } } },
        '#withLimitsMixin':: d.fn(help='"Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='limits', type=d.T.object)]),
        withLimitsMixin(limits): { spec+: { jobservice+: { resources+: { limits+: limits } } } },
        '#withRequests':: d.fn(help='"Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/"', args=[d.arg(name='requests', type=d.T.object)]),
        withRequests(requests): { spec+: { jobservice+: { resources+: { requests: requests } } } },
        '#withRequestsMixin':: d.fn(help='"Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='requests', type=d.T.object)]),
        withRequestsMixin(requests): { spec+: { jobservice+: { resources+: { requests+: requests } } } },
      },
      '#tolerations':: d.obj(help="\"If specified, the pod's tolerations.\""),
      tolerations: {
        '#withEffect':: d.fn(help='"Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute."', args=[d.arg(name='effect', type=d.T.string)]),
        withEffect(effect): { effect: effect },
        '#withKey':: d.fn(help='"Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys."', args=[d.arg(name='key', type=d.T.string)]),
        withKey(key): { key: key },
        '#withOperator':: d.fn(help="\"Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.\"", args=[d.arg(name='operator', type=d.T.string)]),
        withOperator(operator): { operator: operator },
        '#withTolerationSeconds':: d.fn(help='"TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system."', args=[d.arg(name='tolerationSeconds', type=d.T.integer)]),
        withTolerationSeconds(tolerationSeconds): { tolerationSeconds: tolerationSeconds },
        '#withValue':: d.fn(help='"Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string."', args=[d.arg(name='value', type=d.T.string)]),
        withValue(value): { value: value },
      },
      '#withCertificateRefs':: d.fn(help='', args=[d.arg(name='certificateRefs', type=d.T.array)]),
      withCertificateRefs(certificateRefs): { spec+: { jobservice+: { certificateRefs: if std.isArray(v=certificateRefs) then certificateRefs else [certificateRefs] } } },
      '#withCertificateRefsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='certificateRefs', type=d.T.array)]),
      withCertificateRefsMixin(certificateRefs): { spec+: { jobservice+: { certificateRefs+: if std.isArray(v=certificateRefs) then certificateRefs else [certificateRefs] } } },
      '#withImage':: d.fn(help='"Image name for the component."', args=[d.arg(name='image', type=d.T.string)]),
      withImage(image): { spec+: { jobservice+: { image: image } } },
      '#withImagePullPolicy':: d.fn(help='"Image pull policy. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images"', args=[d.arg(name='imagePullPolicy', type=d.T.string)]),
      withImagePullPolicy(imagePullPolicy): { spec+: { jobservice+: { imagePullPolicy: imagePullPolicy } } },
      '#withImagePullSecrets':: d.fn(help='', args=[d.arg(name='imagePullSecrets', type=d.T.array)]),
      withImagePullSecrets(imagePullSecrets): { spec+: { jobservice+: { imagePullSecrets: if std.isArray(v=imagePullSecrets) then imagePullSecrets else [imagePullSecrets] } } },
      '#withImagePullSecretsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='imagePullSecrets', type=d.T.array)]),
      withImagePullSecretsMixin(imagePullSecrets): { spec+: { jobservice+: { imagePullSecrets+: if std.isArray(v=imagePullSecrets) then imagePullSecrets else [imagePullSecrets] } } },
      '#withNodeSelector':: d.fn(help="\"NodeSelector is a selector which must be true for the component to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\"", args=[d.arg(name='nodeSelector', type=d.T.object)]),
      withNodeSelector(nodeSelector): { spec+: { jobservice+: { nodeSelector: nodeSelector } } },
      '#withNodeSelectorMixin':: d.fn(help="\"NodeSelector is a selector which must be true for the component to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\"\n\n**Note:** This function appends passed data to existing values", args=[d.arg(name='nodeSelector', type=d.T.object)]),
      withNodeSelectorMixin(nodeSelector): { spec+: { jobservice+: { nodeSelector+: nodeSelector } } },
      '#withReplicas':: d.fn(help='"Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller"', args=[d.arg(name='replicas', type=d.T.integer)]),
      withReplicas(replicas): { spec+: { jobservice+: { replicas: replicas } } },
      '#withServiceAccountName':: d.fn(help='"ServiceAccountName is the name of the ServiceAccount to use to run this component. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/"', args=[d.arg(name='serviceAccountName', type=d.T.string)]),
      withServiceAccountName(serviceAccountName): { spec+: { jobservice+: { serviceAccountName: serviceAccountName } } },
      '#withTolerations':: d.fn(help="\"If specified, the pod's tolerations.\"", args=[d.arg(name='tolerations', type=d.T.array)]),
      withTolerations(tolerations): { spec+: { jobservice+: { tolerations: if std.isArray(v=tolerations) then tolerations else [tolerations] } } },
      '#withTolerationsMixin':: d.fn(help="\"If specified, the pod's tolerations.\"\n\n**Note:** This function appends passed data to existing values", args=[d.arg(name='tolerations', type=d.T.array)]),
      withTolerationsMixin(tolerations): { spec+: { jobservice+: { tolerations+: if std.isArray(v=tolerations) then tolerations else [tolerations] } } },
      '#withWorkerCount':: d.fn(help='', args=[d.arg(name='workerCount', type=d.T.integer)]),
      withWorkerCount(workerCount): { spec+: { jobservice+: { workerCount: workerCount } } },
    },
    '#network':: d.obj(help='"Network settings for the harbor"'),
    network: {
      '#withIpFamilies':: d.fn(help='', args=[d.arg(name='ipFamilies', type=d.T.array)]),
      withIpFamilies(ipFamilies): { spec+: { network+: { ipFamilies: if std.isArray(v=ipFamilies) then ipFamilies else [ipFamilies] } } },
      '#withIpFamiliesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='ipFamilies', type=d.T.array)]),
      withIpFamiliesMixin(ipFamilies): { spec+: { network+: { ipFamilies+: if std.isArray(v=ipFamilies) then ipFamilies else [ipFamilies] } } },
    },
    '#notary':: d.obj(help=''),
    notary: {
      '#server':: d.obj(help=''),
      server: {
        '#imagePullSecrets':: d.obj(help=''),
        imagePullSecrets: {
          '#withName':: d.fn(help='"Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?"', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { name: name },
        },
        '#resources':: d.obj(help='"Compute Resources required by this component. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/"'),
        resources: {
          '#withLimits':: d.fn(help='"Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/"', args=[d.arg(name='limits', type=d.T.object)]),
          withLimits(limits): { spec+: { notary+: { server+: { resources+: { limits: limits } } } } },
          '#withLimitsMixin':: d.fn(help='"Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='limits', type=d.T.object)]),
          withLimitsMixin(limits): { spec+: { notary+: { server+: { resources+: { limits+: limits } } } } },
          '#withRequests':: d.fn(help='"Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/"', args=[d.arg(name='requests', type=d.T.object)]),
          withRequests(requests): { spec+: { notary+: { server+: { resources+: { requests: requests } } } } },
          '#withRequestsMixin':: d.fn(help='"Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='requests', type=d.T.object)]),
          withRequestsMixin(requests): { spec+: { notary+: { server+: { resources+: { requests+: requests } } } } },
        },
        '#tolerations':: d.obj(help="\"If specified, the pod's tolerations.\""),
        tolerations: {
          '#withEffect':: d.fn(help='"Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute."', args=[d.arg(name='effect', type=d.T.string)]),
          withEffect(effect): { effect: effect },
          '#withKey':: d.fn(help='"Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys."', args=[d.arg(name='key', type=d.T.string)]),
          withKey(key): { key: key },
          '#withOperator':: d.fn(help="\"Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.\"", args=[d.arg(name='operator', type=d.T.string)]),
          withOperator(operator): { operator: operator },
          '#withTolerationSeconds':: d.fn(help='"TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system."', args=[d.arg(name='tolerationSeconds', type=d.T.integer)]),
          withTolerationSeconds(tolerationSeconds): { tolerationSeconds: tolerationSeconds },
          '#withValue':: d.fn(help='"Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string."', args=[d.arg(name='value', type=d.T.string)]),
          withValue(value): { value: value },
        },
        '#withImage':: d.fn(help='"Image name for the component."', args=[d.arg(name='image', type=d.T.string)]),
        withImage(image): { spec+: { notary+: { server+: { image: image } } } },
        '#withImagePullPolicy':: d.fn(help='"Image pull policy. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images"', args=[d.arg(name='imagePullPolicy', type=d.T.string)]),
        withImagePullPolicy(imagePullPolicy): { spec+: { notary+: { server+: { imagePullPolicy: imagePullPolicy } } } },
        '#withImagePullSecrets':: d.fn(help='', args=[d.arg(name='imagePullSecrets', type=d.T.array)]),
        withImagePullSecrets(imagePullSecrets): { spec+: { notary+: { server+: { imagePullSecrets: if std.isArray(v=imagePullSecrets) then imagePullSecrets else [imagePullSecrets] } } } },
        '#withImagePullSecretsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='imagePullSecrets', type=d.T.array)]),
        withImagePullSecretsMixin(imagePullSecrets): { spec+: { notary+: { server+: { imagePullSecrets+: if std.isArray(v=imagePullSecrets) then imagePullSecrets else [imagePullSecrets] } } } },
        '#withNodeSelector':: d.fn(help="\"NodeSelector is a selector which must be true for the component to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\"", args=[d.arg(name='nodeSelector', type=d.T.object)]),
        withNodeSelector(nodeSelector): { spec+: { notary+: { server+: { nodeSelector: nodeSelector } } } },
        '#withNodeSelectorMixin':: d.fn(help="\"NodeSelector is a selector which must be true for the component to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\"\n\n**Note:** This function appends passed data to existing values", args=[d.arg(name='nodeSelector', type=d.T.object)]),
        withNodeSelectorMixin(nodeSelector): { spec+: { notary+: { server+: { nodeSelector+: nodeSelector } } } },
        '#withReplicas':: d.fn(help='"Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller"', args=[d.arg(name='replicas', type=d.T.integer)]),
        withReplicas(replicas): { spec+: { notary+: { server+: { replicas: replicas } } } },
        '#withServiceAccountName':: d.fn(help='"ServiceAccountName is the name of the ServiceAccount to use to run this component. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/"', args=[d.arg(name='serviceAccountName', type=d.T.string)]),
        withServiceAccountName(serviceAccountName): { spec+: { notary+: { server+: { serviceAccountName: serviceAccountName } } } },
        '#withTolerations':: d.fn(help="\"If specified, the pod's tolerations.\"", args=[d.arg(name='tolerations', type=d.T.array)]),
        withTolerations(tolerations): { spec+: { notary+: { server+: { tolerations: if std.isArray(v=tolerations) then tolerations else [tolerations] } } } },
        '#withTolerationsMixin':: d.fn(help="\"If specified, the pod's tolerations.\"\n\n**Note:** This function appends passed data to existing values", args=[d.arg(name='tolerations', type=d.T.array)]),
        withTolerationsMixin(tolerations): { spec+: { notary+: { server+: { tolerations+: if std.isArray(v=tolerations) then tolerations else [tolerations] } } } },
      },
      '#signer':: d.obj(help=''),
      signer: {
        '#imagePullSecrets':: d.obj(help=''),
        imagePullSecrets: {
          '#withName':: d.fn(help='"Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?"', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { name: name },
        },
        '#resources':: d.obj(help='"Compute Resources required by this component. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/"'),
        resources: {
          '#withLimits':: d.fn(help='"Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/"', args=[d.arg(name='limits', type=d.T.object)]),
          withLimits(limits): { spec+: { notary+: { signer+: { resources+: { limits: limits } } } } },
          '#withLimitsMixin':: d.fn(help='"Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='limits', type=d.T.object)]),
          withLimitsMixin(limits): { spec+: { notary+: { signer+: { resources+: { limits+: limits } } } } },
          '#withRequests':: d.fn(help='"Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/"', args=[d.arg(name='requests', type=d.T.object)]),
          withRequests(requests): { spec+: { notary+: { signer+: { resources+: { requests: requests } } } } },
          '#withRequestsMixin':: d.fn(help='"Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='requests', type=d.T.object)]),
          withRequestsMixin(requests): { spec+: { notary+: { signer+: { resources+: { requests+: requests } } } } },
        },
        '#tolerations':: d.obj(help="\"If specified, the pod's tolerations.\""),
        tolerations: {
          '#withEffect':: d.fn(help='"Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute."', args=[d.arg(name='effect', type=d.T.string)]),
          withEffect(effect): { effect: effect },
          '#withKey':: d.fn(help='"Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys."', args=[d.arg(name='key', type=d.T.string)]),
          withKey(key): { key: key },
          '#withOperator':: d.fn(help="\"Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.\"", args=[d.arg(name='operator', type=d.T.string)]),
          withOperator(operator): { operator: operator },
          '#withTolerationSeconds':: d.fn(help='"TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system."', args=[d.arg(name='tolerationSeconds', type=d.T.integer)]),
          withTolerationSeconds(tolerationSeconds): { tolerationSeconds: tolerationSeconds },
          '#withValue':: d.fn(help='"Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string."', args=[d.arg(name='value', type=d.T.string)]),
          withValue(value): { value: value },
        },
        '#withImage':: d.fn(help='"Image name for the component."', args=[d.arg(name='image', type=d.T.string)]),
        withImage(image): { spec+: { notary+: { signer+: { image: image } } } },
        '#withImagePullPolicy':: d.fn(help='"Image pull policy. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images"', args=[d.arg(name='imagePullPolicy', type=d.T.string)]),
        withImagePullPolicy(imagePullPolicy): { spec+: { notary+: { signer+: { imagePullPolicy: imagePullPolicy } } } },
        '#withImagePullSecrets':: d.fn(help='', args=[d.arg(name='imagePullSecrets', type=d.T.array)]),
        withImagePullSecrets(imagePullSecrets): { spec+: { notary+: { signer+: { imagePullSecrets: if std.isArray(v=imagePullSecrets) then imagePullSecrets else [imagePullSecrets] } } } },
        '#withImagePullSecretsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='imagePullSecrets', type=d.T.array)]),
        withImagePullSecretsMixin(imagePullSecrets): { spec+: { notary+: { signer+: { imagePullSecrets+: if std.isArray(v=imagePullSecrets) then imagePullSecrets else [imagePullSecrets] } } } },
        '#withNodeSelector':: d.fn(help="\"NodeSelector is a selector which must be true for the component to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\"", args=[d.arg(name='nodeSelector', type=d.T.object)]),
        withNodeSelector(nodeSelector): { spec+: { notary+: { signer+: { nodeSelector: nodeSelector } } } },
        '#withNodeSelectorMixin':: d.fn(help="\"NodeSelector is a selector which must be true for the component to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\"\n\n**Note:** This function appends passed data to existing values", args=[d.arg(name='nodeSelector', type=d.T.object)]),
        withNodeSelectorMixin(nodeSelector): { spec+: { notary+: { signer+: { nodeSelector+: nodeSelector } } } },
        '#withReplicas':: d.fn(help='"Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller"', args=[d.arg(name='replicas', type=d.T.integer)]),
        withReplicas(replicas): { spec+: { notary+: { signer+: { replicas: replicas } } } },
        '#withServiceAccountName':: d.fn(help='"ServiceAccountName is the name of the ServiceAccount to use to run this component. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/"', args=[d.arg(name='serviceAccountName', type=d.T.string)]),
        withServiceAccountName(serviceAccountName): { spec+: { notary+: { signer+: { serviceAccountName: serviceAccountName } } } },
        '#withTolerations':: d.fn(help="\"If specified, the pod's tolerations.\"", args=[d.arg(name='tolerations', type=d.T.array)]),
        withTolerations(tolerations): { spec+: { notary+: { signer+: { tolerations: if std.isArray(v=tolerations) then tolerations else [tolerations] } } } },
        '#withTolerationsMixin':: d.fn(help="\"If specified, the pod's tolerations.\"\n\n**Note:** This function appends passed data to existing values", args=[d.arg(name='tolerations', type=d.T.array)]),
        withTolerationsMixin(tolerations): { spec+: { notary+: { signer+: { tolerations+: if std.isArray(v=tolerations) then tolerations else [tolerations] } } } },
      },
      '#withMigrationEnabled':: d.fn(help='"Inject migration configuration to notary resources"', args=[d.arg(name='migrationEnabled', type=d.T.boolean)]),
      withMigrationEnabled(migrationEnabled): { spec+: { notary+: { migrationEnabled: migrationEnabled } } },
    },
    '#portal':: d.obj(help=''),
    portal: {
      '#imagePullSecrets':: d.obj(help=''),
      imagePullSecrets: {
        '#withName':: d.fn(help='"Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?"', args=[d.arg(name='name', type=d.T.string)]),
        withName(name): { name: name },
      },
      '#resources':: d.obj(help='"Compute Resources required by this component. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/"'),
      resources: {
        '#withLimits':: d.fn(help='"Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/"', args=[d.arg(name='limits', type=d.T.object)]),
        withLimits(limits): { spec+: { portal+: { resources+: { limits: limits } } } },
        '#withLimitsMixin':: d.fn(help='"Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='limits', type=d.T.object)]),
        withLimitsMixin(limits): { spec+: { portal+: { resources+: { limits+: limits } } } },
        '#withRequests':: d.fn(help='"Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/"', args=[d.arg(name='requests', type=d.T.object)]),
        withRequests(requests): { spec+: { portal+: { resources+: { requests: requests } } } },
        '#withRequestsMixin':: d.fn(help='"Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='requests', type=d.T.object)]),
        withRequestsMixin(requests): { spec+: { portal+: { resources+: { requests+: requests } } } },
      },
      '#tolerations':: d.obj(help="\"If specified, the pod's tolerations.\""),
      tolerations: {
        '#withEffect':: d.fn(help='"Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute."', args=[d.arg(name='effect', type=d.T.string)]),
        withEffect(effect): { effect: effect },
        '#withKey':: d.fn(help='"Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys."', args=[d.arg(name='key', type=d.T.string)]),
        withKey(key): { key: key },
        '#withOperator':: d.fn(help="\"Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.\"", args=[d.arg(name='operator', type=d.T.string)]),
        withOperator(operator): { operator: operator },
        '#withTolerationSeconds':: d.fn(help='"TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system."', args=[d.arg(name='tolerationSeconds', type=d.T.integer)]),
        withTolerationSeconds(tolerationSeconds): { tolerationSeconds: tolerationSeconds },
        '#withValue':: d.fn(help='"Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string."', args=[d.arg(name='value', type=d.T.string)]),
        withValue(value): { value: value },
      },
      '#withImage':: d.fn(help='"Image name for the component."', args=[d.arg(name='image', type=d.T.string)]),
      withImage(image): { spec+: { portal+: { image: image } } },
      '#withImagePullPolicy':: d.fn(help='"Image pull policy. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images"', args=[d.arg(name='imagePullPolicy', type=d.T.string)]),
      withImagePullPolicy(imagePullPolicy): { spec+: { portal+: { imagePullPolicy: imagePullPolicy } } },
      '#withImagePullSecrets':: d.fn(help='', args=[d.arg(name='imagePullSecrets', type=d.T.array)]),
      withImagePullSecrets(imagePullSecrets): { spec+: { portal+: { imagePullSecrets: if std.isArray(v=imagePullSecrets) then imagePullSecrets else [imagePullSecrets] } } },
      '#withImagePullSecretsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='imagePullSecrets', type=d.T.array)]),
      withImagePullSecretsMixin(imagePullSecrets): { spec+: { portal+: { imagePullSecrets+: if std.isArray(v=imagePullSecrets) then imagePullSecrets else [imagePullSecrets] } } },
      '#withNodeSelector':: d.fn(help="\"NodeSelector is a selector which must be true for the component to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\"", args=[d.arg(name='nodeSelector', type=d.T.object)]),
      withNodeSelector(nodeSelector): { spec+: { portal+: { nodeSelector: nodeSelector } } },
      '#withNodeSelectorMixin':: d.fn(help="\"NodeSelector is a selector which must be true for the component to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\"\n\n**Note:** This function appends passed data to existing values", args=[d.arg(name='nodeSelector', type=d.T.object)]),
      withNodeSelectorMixin(nodeSelector): { spec+: { portal+: { nodeSelector+: nodeSelector } } },
      '#withReplicas':: d.fn(help='"Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller"', args=[d.arg(name='replicas', type=d.T.integer)]),
      withReplicas(replicas): { spec+: { portal+: { replicas: replicas } } },
      '#withServiceAccountName':: d.fn(help='"ServiceAccountName is the name of the ServiceAccount to use to run this component. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/"', args=[d.arg(name='serviceAccountName', type=d.T.string)]),
      withServiceAccountName(serviceAccountName): { spec+: { portal+: { serviceAccountName: serviceAccountName } } },
      '#withTolerations':: d.fn(help="\"If specified, the pod's tolerations.\"", args=[d.arg(name='tolerations', type=d.T.array)]),
      withTolerations(tolerations): { spec+: { portal+: { tolerations: if std.isArray(v=tolerations) then tolerations else [tolerations] } } },
      '#withTolerationsMixin':: d.fn(help="\"If specified, the pod's tolerations.\"\n\n**Note:** This function appends passed data to existing values", args=[d.arg(name='tolerations', type=d.T.array)]),
      withTolerationsMixin(tolerations): { spec+: { portal+: { tolerations+: if std.isArray(v=tolerations) then tolerations else [tolerations] } } },
    },
    '#proxy':: d.obj(help=''),
    proxy: {
      '#withComponents':: d.fn(help='', args=[d.arg(name='components', type=d.T.array)]),
      withComponents(components): { spec+: { proxy+: { components: if std.isArray(v=components) then components else [components] } } },
      '#withComponentsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='components', type=d.T.array)]),
      withComponentsMixin(components): { spec+: { proxy+: { components+: if std.isArray(v=components) then components else [components] } } },
      '#withHttpProxy':: d.fn(help='', args=[d.arg(name='httpProxy', type=d.T.string)]),
      withHttpProxy(httpProxy): { spec+: { proxy+: { httpProxy: httpProxy } } },
      '#withHttpsProxy':: d.fn(help='', args=[d.arg(name='httpsProxy', type=d.T.string)]),
      withHttpsProxy(httpsProxy): { spec+: { proxy+: { httpsProxy: httpsProxy } } },
      '#withNoProxy':: d.fn(help='', args=[d.arg(name='noProxy', type=d.T.array)]),
      withNoProxy(noProxy): { spec+: { proxy+: { noProxy: if std.isArray(v=noProxy) then noProxy else [noProxy] } } },
      '#withNoProxyMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='noProxy', type=d.T.array)]),
      withNoProxyMixin(noProxy): { spec+: { proxy+: { noProxy+: if std.isArray(v=noProxy) then noProxy else [noProxy] } } },
    },
    '#registry':: d.obj(help=''),
    registry: {
      '#imagePullSecrets':: d.obj(help=''),
      imagePullSecrets: {
        '#withName':: d.fn(help='"Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?"', args=[d.arg(name='name', type=d.T.string)]),
        withName(name): { name: name },
      },
      '#metrics':: d.obj(help=''),
      metrics: {
        '#withEnabled':: d.fn(help='', args=[d.arg(name='enabled', type=d.T.boolean)]),
        withEnabled(enabled): { spec+: { registry+: { metrics+: { enabled: enabled } } } },
        '#withPath':: d.fn(help='"The path of the metrics."', args=[d.arg(name='path', type=d.T.string)]),
        withPath(path): { spec+: { registry+: { metrics+: { path: path } } } },
        '#withPort':: d.fn(help='"The port of the metrics."', args=[d.arg(name='port', type=d.T.integer)]),
        withPort(port): { spec+: { registry+: { metrics+: { port: port } } } },
      },
      '#resources':: d.obj(help='"Compute Resources required by this component. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/"'),
      resources: {
        '#withLimits':: d.fn(help='"Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/"', args=[d.arg(name='limits', type=d.T.object)]),
        withLimits(limits): { spec+: { registry+: { resources+: { limits: limits } } } },
        '#withLimitsMixin':: d.fn(help='"Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='limits', type=d.T.object)]),
        withLimitsMixin(limits): { spec+: { registry+: { resources+: { limits+: limits } } } },
        '#withRequests':: d.fn(help='"Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/"', args=[d.arg(name='requests', type=d.T.object)]),
        withRequests(requests): { spec+: { registry+: { resources+: { requests: requests } } } },
        '#withRequestsMixin':: d.fn(help='"Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='requests', type=d.T.object)]),
        withRequestsMixin(requests): { spec+: { registry+: { resources+: { requests+: requests } } } },
      },
      '#storageMiddlewares':: d.obj(help=''),
      storageMiddlewares: {
        '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
        withName(name): { name: name },
        '#withOptionsRef':: d.fn(help='', args=[d.arg(name='optionsRef', type=d.T.string)]),
        withOptionsRef(optionsRef): { optionsRef: optionsRef },
      },
      '#tolerations':: d.obj(help="\"If specified, the pod's tolerations.\""),
      tolerations: {
        '#withEffect':: d.fn(help='"Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute."', args=[d.arg(name='effect', type=d.T.string)]),
        withEffect(effect): { effect: effect },
        '#withKey':: d.fn(help='"Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys."', args=[d.arg(name='key', type=d.T.string)]),
        withKey(key): { key: key },
        '#withOperator':: d.fn(help="\"Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.\"", args=[d.arg(name='operator', type=d.T.string)]),
        withOperator(operator): { operator: operator },
        '#withTolerationSeconds':: d.fn(help='"TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system."', args=[d.arg(name='tolerationSeconds', type=d.T.integer)]),
        withTolerationSeconds(tolerationSeconds): { tolerationSeconds: tolerationSeconds },
        '#withValue':: d.fn(help='"Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string."', args=[d.arg(name='value', type=d.T.string)]),
        withValue(value): { value: value },
      },
      '#withCertificateRefs':: d.fn(help='', args=[d.arg(name='certificateRefs', type=d.T.array)]),
      withCertificateRefs(certificateRefs): { spec+: { registry+: { certificateRefs: if std.isArray(v=certificateRefs) then certificateRefs else [certificateRefs] } } },
      '#withCertificateRefsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='certificateRefs', type=d.T.array)]),
      withCertificateRefsMixin(certificateRefs): { spec+: { registry+: { certificateRefs+: if std.isArray(v=certificateRefs) then certificateRefs else [certificateRefs] } } },
      '#withImage':: d.fn(help='"Image name for the component."', args=[d.arg(name='image', type=d.T.string)]),
      withImage(image): { spec+: { registry+: { image: image } } },
      '#withImagePullPolicy':: d.fn(help='"Image pull policy. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images"', args=[d.arg(name='imagePullPolicy', type=d.T.string)]),
      withImagePullPolicy(imagePullPolicy): { spec+: { registry+: { imagePullPolicy: imagePullPolicy } } },
      '#withImagePullSecrets':: d.fn(help='', args=[d.arg(name='imagePullSecrets', type=d.T.array)]),
      withImagePullSecrets(imagePullSecrets): { spec+: { registry+: { imagePullSecrets: if std.isArray(v=imagePullSecrets) then imagePullSecrets else [imagePullSecrets] } } },
      '#withImagePullSecretsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='imagePullSecrets', type=d.T.array)]),
      withImagePullSecretsMixin(imagePullSecrets): { spec+: { registry+: { imagePullSecrets+: if std.isArray(v=imagePullSecrets) then imagePullSecrets else [imagePullSecrets] } } },
      '#withNodeSelector':: d.fn(help="\"NodeSelector is a selector which must be true for the component to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\"", args=[d.arg(name='nodeSelector', type=d.T.object)]),
      withNodeSelector(nodeSelector): { spec+: { registry+: { nodeSelector: nodeSelector } } },
      '#withNodeSelectorMixin':: d.fn(help="\"NodeSelector is a selector which must be true for the component to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\"\n\n**Note:** This function appends passed data to existing values", args=[d.arg(name='nodeSelector', type=d.T.object)]),
      withNodeSelectorMixin(nodeSelector): { spec+: { registry+: { nodeSelector+: nodeSelector } } },
      '#withRelativeURLs':: d.fn(help='', args=[d.arg(name='relativeURLs', type=d.T.boolean)]),
      withRelativeURLs(relativeURLs): { spec+: { registry+: { relativeURLs: relativeURLs } } },
      '#withReplicas':: d.fn(help='"Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller"', args=[d.arg(name='replicas', type=d.T.integer)]),
      withReplicas(replicas): { spec+: { registry+: { replicas: replicas } } },
      '#withServiceAccountName':: d.fn(help='"ServiceAccountName is the name of the ServiceAccount to use to run this component. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/"', args=[d.arg(name='serviceAccountName', type=d.T.string)]),
      withServiceAccountName(serviceAccountName): { spec+: { registry+: { serviceAccountName: serviceAccountName } } },
      '#withStorageMiddlewares':: d.fn(help='', args=[d.arg(name='storageMiddlewares', type=d.T.array)]),
      withStorageMiddlewares(storageMiddlewares): { spec+: { registry+: { storageMiddlewares: if std.isArray(v=storageMiddlewares) then storageMiddlewares else [storageMiddlewares] } } },
      '#withStorageMiddlewaresMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='storageMiddlewares', type=d.T.array)]),
      withStorageMiddlewaresMixin(storageMiddlewares): { spec+: { registry+: { storageMiddlewares+: if std.isArray(v=storageMiddlewares) then storageMiddlewares else [storageMiddlewares] } } },
      '#withTolerations':: d.fn(help="\"If specified, the pod's tolerations.\"", args=[d.arg(name='tolerations', type=d.T.array)]),
      withTolerations(tolerations): { spec+: { registry+: { tolerations: if std.isArray(v=tolerations) then tolerations else [tolerations] } } },
      '#withTolerationsMixin':: d.fn(help="\"If specified, the pod's tolerations.\"\n\n**Note:** This function appends passed data to existing values", args=[d.arg(name='tolerations', type=d.T.array)]),
      withTolerationsMixin(tolerations): { spec+: { registry+: { tolerations+: if std.isArray(v=tolerations) then tolerations else [tolerations] } } },
    },
    '#registryctl':: d.obj(help=''),
    registryctl: {
      '#imagePullSecrets':: d.obj(help=''),
      imagePullSecrets: {
        '#withName':: d.fn(help='"Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?"', args=[d.arg(name='name', type=d.T.string)]),
        withName(name): { name: name },
      },
      '#resources':: d.obj(help='"Compute Resources required by this component. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/"'),
      resources: {
        '#withLimits':: d.fn(help='"Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/"', args=[d.arg(name='limits', type=d.T.object)]),
        withLimits(limits): { spec+: { registryctl+: { resources+: { limits: limits } } } },
        '#withLimitsMixin':: d.fn(help='"Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='limits', type=d.T.object)]),
        withLimitsMixin(limits): { spec+: { registryctl+: { resources+: { limits+: limits } } } },
        '#withRequests':: d.fn(help='"Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/"', args=[d.arg(name='requests', type=d.T.object)]),
        withRequests(requests): { spec+: { registryctl+: { resources+: { requests: requests } } } },
        '#withRequestsMixin':: d.fn(help='"Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='requests', type=d.T.object)]),
        withRequestsMixin(requests): { spec+: { registryctl+: { resources+: { requests+: requests } } } },
      },
      '#tolerations':: d.obj(help="\"If specified, the pod's tolerations.\""),
      tolerations: {
        '#withEffect':: d.fn(help='"Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute."', args=[d.arg(name='effect', type=d.T.string)]),
        withEffect(effect): { effect: effect },
        '#withKey':: d.fn(help='"Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys."', args=[d.arg(name='key', type=d.T.string)]),
        withKey(key): { key: key },
        '#withOperator':: d.fn(help="\"Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.\"", args=[d.arg(name='operator', type=d.T.string)]),
        withOperator(operator): { operator: operator },
        '#withTolerationSeconds':: d.fn(help='"TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system."', args=[d.arg(name='tolerationSeconds', type=d.T.integer)]),
        withTolerationSeconds(tolerationSeconds): { tolerationSeconds: tolerationSeconds },
        '#withValue':: d.fn(help='"Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string."', args=[d.arg(name='value', type=d.T.string)]),
        withValue(value): { value: value },
      },
      '#withImage':: d.fn(help='"Image name for the component."', args=[d.arg(name='image', type=d.T.string)]),
      withImage(image): { spec+: { registryctl+: { image: image } } },
      '#withImagePullPolicy':: d.fn(help='"Image pull policy. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images"', args=[d.arg(name='imagePullPolicy', type=d.T.string)]),
      withImagePullPolicy(imagePullPolicy): { spec+: { registryctl+: { imagePullPolicy: imagePullPolicy } } },
      '#withImagePullSecrets':: d.fn(help='', args=[d.arg(name='imagePullSecrets', type=d.T.array)]),
      withImagePullSecrets(imagePullSecrets): { spec+: { registryctl+: { imagePullSecrets: if std.isArray(v=imagePullSecrets) then imagePullSecrets else [imagePullSecrets] } } },
      '#withImagePullSecretsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='imagePullSecrets', type=d.T.array)]),
      withImagePullSecretsMixin(imagePullSecrets): { spec+: { registryctl+: { imagePullSecrets+: if std.isArray(v=imagePullSecrets) then imagePullSecrets else [imagePullSecrets] } } },
      '#withNodeSelector':: d.fn(help="\"NodeSelector is a selector which must be true for the component to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\"", args=[d.arg(name='nodeSelector', type=d.T.object)]),
      withNodeSelector(nodeSelector): { spec+: { registryctl+: { nodeSelector: nodeSelector } } },
      '#withNodeSelectorMixin':: d.fn(help="\"NodeSelector is a selector which must be true for the component to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\"\n\n**Note:** This function appends passed data to existing values", args=[d.arg(name='nodeSelector', type=d.T.object)]),
      withNodeSelectorMixin(nodeSelector): { spec+: { registryctl+: { nodeSelector+: nodeSelector } } },
      '#withReplicas':: d.fn(help='"Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller"', args=[d.arg(name='replicas', type=d.T.integer)]),
      withReplicas(replicas): { spec+: { registryctl+: { replicas: replicas } } },
      '#withServiceAccountName':: d.fn(help='"ServiceAccountName is the name of the ServiceAccount to use to run this component. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/"', args=[d.arg(name='serviceAccountName', type=d.T.string)]),
      withServiceAccountName(serviceAccountName): { spec+: { registryctl+: { serviceAccountName: serviceAccountName } } },
      '#withTolerations':: d.fn(help="\"If specified, the pod's tolerations.\"", args=[d.arg(name='tolerations', type=d.T.array)]),
      withTolerations(tolerations): { spec+: { registryctl+: { tolerations: if std.isArray(v=tolerations) then tolerations else [tolerations] } } },
      '#withTolerationsMixin':: d.fn(help="\"If specified, the pod's tolerations.\"\n\n**Note:** This function appends passed data to existing values", args=[d.arg(name='tolerations', type=d.T.array)]),
      withTolerationsMixin(tolerations): { spec+: { registryctl+: { tolerations+: if std.isArray(v=tolerations) then tolerations else [tolerations] } } },
    },
    '#storage':: d.obj(help='"Storage configuration for in-cluster storage service"'),
    storage: {
      '#spec':: d.obj(help='"the spec of Storage."'),
      spec: {
        '#azure':: d.obj(help=''),
        azure: {
          '#withAccountkeyRef':: d.fn(help='', args=[d.arg(name='accountkeyRef', type=d.T.string)]),
          withAccountkeyRef(accountkeyRef): { spec+: { storage+: { spec+: { azure+: { accountkeyRef: accountkeyRef } } } } },
          '#withAccountname':: d.fn(help='', args=[d.arg(name='accountname', type=d.T.string)]),
          withAccountname(accountname): { spec+: { storage+: { spec+: { azure+: { accountname: accountname } } } } },
          '#withBaseURL':: d.fn(help='', args=[d.arg(name='baseURL', type=d.T.string)]),
          withBaseURL(baseURL): { spec+: { storage+: { spec+: { azure+: { baseURL: baseURL } } } } },
          '#withContainer':: d.fn(help='', args=[d.arg(name='container', type=d.T.string)]),
          withContainer(container): { spec+: { storage+: { spec+: { azure+: { container: container } } } } },
          '#withPathPrefix':: d.fn(help='', args=[d.arg(name='pathPrefix', type=d.T.string)]),
          withPathPrefix(pathPrefix): { spec+: { storage+: { spec+: { azure+: { pathPrefix: pathPrefix } } } } },
        },
        '#fileSystem':: d.obj(help=''),
        fileSystem: {
          '#chartPersistentVolume':: d.obj(help=''),
          chartPersistentVolume: {
            '#withClaimName':: d.fn(help='"ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims"', args=[d.arg(name='claimName', type=d.T.string)]),
            withClaimName(claimName): { spec+: { storage+: { spec+: { fileSystem+: { chartPersistentVolume+: { claimName: claimName } } } } } },
            '#withPrefix':: d.fn(help='', args=[d.arg(name='prefix', type=d.T.string)]),
            withPrefix(prefix): { spec+: { storage+: { spec+: { fileSystem+: { chartPersistentVolume+: { prefix: prefix } } } } } },
            '#withReadOnly':: d.fn(help='"Will force the ReadOnly setting in VolumeMounts. Default false."', args=[d.arg(name='readOnly', type=d.T.boolean)]),
            withReadOnly(readOnly): { spec+: { storage+: { spec+: { fileSystem+: { chartPersistentVolume+: { readOnly: readOnly } } } } } },
          },
          '#registryPersistentVolume':: d.obj(help=''),
          registryPersistentVolume: {
            '#withClaimName':: d.fn(help='"ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims"', args=[d.arg(name='claimName', type=d.T.string)]),
            withClaimName(claimName): { spec+: { storage+: { spec+: { fileSystem+: { registryPersistentVolume+: { claimName: claimName } } } } } },
            '#withMaxthreads':: d.fn(help='', args=[d.arg(name='maxthreads', type=d.T.integer)]),
            withMaxthreads(maxthreads): { spec+: { storage+: { spec+: { fileSystem+: { registryPersistentVolume+: { maxthreads: maxthreads } } } } } },
            '#withPrefix':: d.fn(help='', args=[d.arg(name='prefix', type=d.T.string)]),
            withPrefix(prefix): { spec+: { storage+: { spec+: { fileSystem+: { registryPersistentVolume+: { prefix: prefix } } } } } },
            '#withReadOnly':: d.fn(help='"Will force the ReadOnly setting in VolumeMounts. Default false."', args=[d.arg(name='readOnly', type=d.T.boolean)]),
            withReadOnly(readOnly): { spec+: { storage+: { spec+: { fileSystem+: { registryPersistentVolume+: { readOnly: readOnly } } } } } },
          },
        },
        '#gcs':: d.obj(help=''),
        gcs: {
          '#withBucket':: d.fn(help='"bucket to store charts for Gcs storage"', args=[d.arg(name='bucket', type=d.T.string)]),
          withBucket(bucket): { spec+: { storage+: { spec+: { gcs+: { bucket: bucket } } } } },
          '#withChunkSize':: d.fn(help='', args=[d.arg(name='chunkSize', type=d.T.string)]),
          withChunkSize(chunkSize): { spec+: { storage+: { spec+: { gcs+: { chunkSize: chunkSize } } } } },
          '#withKeyDataRef':: d.fn(help='"The base64 encoded json file which contains the key"', args=[d.arg(name='keyDataRef', type=d.T.string)]),
          withKeyDataRef(keyDataRef): { spec+: { storage+: { spec+: { gcs+: { keyDataRef: keyDataRef } } } } },
          '#withPathPrefix':: d.fn(help='', args=[d.arg(name='pathPrefix', type=d.T.string)]),
          withPathPrefix(pathPrefix): { spec+: { storage+: { spec+: { gcs+: { pathPrefix: pathPrefix } } } } },
        },
        '#minIO':: d.obj(help='"inCluster options."'),
        minIO: {
          '#imagePullSecrets':: d.obj(help=''),
          imagePullSecrets: {
            '#withName':: d.fn(help='"Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?"', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { name: name },
          },
          '#mc':: d.obj(help='"MinIOClientSpec the spec for the mc"'),
          mc: {
            '#imagePullSecrets':: d.obj(help=''),
            imagePullSecrets: {
              '#withName':: d.fn(help='"Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?"', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { name: name },
            },
            '#withImage':: d.fn(help='"Image name for the component."', args=[d.arg(name='image', type=d.T.string)]),
            withImage(image): { spec+: { storage+: { spec+: { minIO+: { mc+: { image: image } } } } } },
            '#withImagePullPolicy':: d.fn(help='"Image pull policy. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images"', args=[d.arg(name='imagePullPolicy', type=d.T.string)]),
            withImagePullPolicy(imagePullPolicy): { spec+: { storage+: { spec+: { minIO+: { mc+: { imagePullPolicy: imagePullPolicy } } } } } },
            '#withImagePullSecrets':: d.fn(help='', args=[d.arg(name='imagePullSecrets', type=d.T.array)]),
            withImagePullSecrets(imagePullSecrets): { spec+: { storage+: { spec+: { minIO+: { mc+: { imagePullSecrets: if std.isArray(v=imagePullSecrets) then imagePullSecrets else [imagePullSecrets] } } } } } },
            '#withImagePullSecretsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='imagePullSecrets', type=d.T.array)]),
            withImagePullSecretsMixin(imagePullSecrets): { spec+: { storage+: { spec+: { minIO+: { mc+: { imagePullSecrets+: if std.isArray(v=imagePullSecrets) then imagePullSecrets else [imagePullSecrets] } } } } } },
          },
          '#redirect':: d.obj(help='"deprecated Determine if the redirection of minio storage is disabled."'),
          redirect: {
            '#expose':: d.obj(help=''),
            expose: {
              '#ingress':: d.obj(help=''),
              ingress: {
                '#withAnnotations':: d.fn(help='', args=[d.arg(name='annotations', type=d.T.object)]),
                withAnnotations(annotations): { spec+: { storage+: { spec+: { minIO+: { redirect+: { expose+: { ingress+: { annotations: annotations } } } } } } } },
                '#withAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
                withAnnotationsMixin(annotations): { spec+: { storage+: { spec+: { minIO+: { redirect+: { expose+: { ingress+: { annotations+: annotations } } } } } } } },
                '#withController':: d.fn(help='"Set to the type of ingress controller."', args=[d.arg(name='controller', type=d.T.string)]),
                withController(controller): { spec+: { storage+: { spec+: { minIO+: { redirect+: { expose+: { ingress+: { controller: controller } } } } } } } },
                '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
                withHost(host): { spec+: { storage+: { spec+: { minIO+: { redirect+: { expose+: { ingress+: { host: host } } } } } } } },
                '#withIngressClassName':: d.fn(help='', args=[d.arg(name='ingressClassName', type=d.T.string)]),
                withIngressClassName(ingressClassName): { spec+: { storage+: { spec+: { minIO+: { redirect+: { expose+: { ingress+: { ingressClassName: ingressClassName } } } } } } } },
              },
              '#tls':: d.obj(help=''),
              tls: {
                '#withCertificateRef':: d.fn(help='', args=[d.arg(name='certificateRef', type=d.T.string)]),
                withCertificateRef(certificateRef): { spec+: { storage+: { spec+: { minIO+: { redirect+: { expose+: { tls+: { certificateRef: certificateRef } } } } } } } },
              },
            },
            '#withEnable':: d.fn(help='"Default is true"', args=[d.arg(name='enable', type=d.T.boolean)]),
            withEnable(enable): { spec+: { storage+: { spec+: { minIO+: { redirect+: { enable: enable } } } } } },
          },
          '#resources':: d.obj(help='"If provided, use these requests and limit for cpu/memory resource allocation"'),
          resources: {
            '#withLimits':: d.fn(help='"Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/"', args=[d.arg(name='limits', type=d.T.object)]),
            withLimits(limits): { spec+: { storage+: { spec+: { minIO+: { resources+: { limits: limits } } } } } },
            '#withLimitsMixin':: d.fn(help='"Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='limits', type=d.T.object)]),
            withLimitsMixin(limits): { spec+: { storage+: { spec+: { minIO+: { resources+: { limits+: limits } } } } } },
            '#withRequests':: d.fn(help='"Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/"', args=[d.arg(name='requests', type=d.T.object)]),
            withRequests(requests): { spec+: { storage+: { spec+: { minIO+: { resources+: { requests: requests } } } } } },
            '#withRequestsMixin':: d.fn(help='"Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='requests', type=d.T.object)]),
            withRequestsMixin(requests): { spec+: { storage+: { spec+: { minIO+: { resources+: { requests+: requests } } } } } },
          },
          '#volumeClaimTemplate':: d.obj(help='"VolumeClaimTemplate allows a user to specify how volumes inside a MinIOInstance"'),
          volumeClaimTemplate: {
            '#spec':: d.obj(help='"Spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims"'),
            spec: {
              '#dataSource':: d.obj(help='"This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field."'),
              dataSource: {
                '#withApiGroup':: d.fn(help='"APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required."', args=[d.arg(name='apiGroup', type=d.T.string)]),
                withApiGroup(apiGroup): { spec+: { storage+: { spec+: { minIO+: { volumeClaimTemplate+: { spec+: { dataSource+: { apiGroup: apiGroup } } } } } } } },
                '#withKind':: d.fn(help='"Kind is the type of resource being referenced"', args=[d.arg(name='kind', type=d.T.string)]),
                withKind(kind): { spec+: { storage+: { spec+: { minIO+: { volumeClaimTemplate+: { spec+: { dataSource+: { kind: kind } } } } } } } },
                '#withName':: d.fn(help='"Name is the name of resource being referenced"', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { spec+: { storage+: { spec+: { minIO+: { volumeClaimTemplate+: { spec+: { dataSource+: { name: name } } } } } } } },
              },
              '#dataSourceRef':: d.obj(help='"Specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef   allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef   preserves all values, and generates an error if a disallowed value is   specified. (Alpha) Using this field requires the AnyVolumeDataSource feature gate to be enabled."'),
              dataSourceRef: {
                '#withApiGroup':: d.fn(help='"APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required."', args=[d.arg(name='apiGroup', type=d.T.string)]),
                withApiGroup(apiGroup): { spec+: { storage+: { spec+: { minIO+: { volumeClaimTemplate+: { spec+: { dataSourceRef+: { apiGroup: apiGroup } } } } } } } },
                '#withKind':: d.fn(help='"Kind is the type of resource being referenced"', args=[d.arg(name='kind', type=d.T.string)]),
                withKind(kind): { spec+: { storage+: { spec+: { minIO+: { volumeClaimTemplate+: { spec+: { dataSourceRef+: { kind: kind } } } } } } } },
                '#withName':: d.fn(help='"Name is the name of resource being referenced"', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { spec+: { storage+: { spec+: { minIO+: { volumeClaimTemplate+: { spec+: { dataSourceRef+: { name: name } } } } } } } },
              },
              '#resources':: d.obj(help='"Resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources"'),
              resources: {
                '#withLimits':: d.fn(help='"Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/"', args=[d.arg(name='limits', type=d.T.object)]),
                withLimits(limits): { spec+: { storage+: { spec+: { minIO+: { volumeClaimTemplate+: { spec+: { resources+: { limits: limits } } } } } } } },
                '#withLimitsMixin':: d.fn(help='"Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='limits', type=d.T.object)]),
                withLimitsMixin(limits): { spec+: { storage+: { spec+: { minIO+: { volumeClaimTemplate+: { spec+: { resources+: { limits+: limits } } } } } } } },
                '#withRequests':: d.fn(help='"Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/"', args=[d.arg(name='requests', type=d.T.object)]),
                withRequests(requests): { spec+: { storage+: { spec+: { minIO+: { volumeClaimTemplate+: { spec+: { resources+: { requests: requests } } } } } } } },
                '#withRequestsMixin':: d.fn(help='"Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='requests', type=d.T.object)]),
                withRequestsMixin(requests): { spec+: { storage+: { spec+: { minIO+: { volumeClaimTemplate+: { spec+: { resources+: { requests+: requests } } } } } } } },
              },
              '#selector':: d.obj(help='"A label query over volumes to consider for binding."'),
              selector: {
                '#matchExpressions':: d.obj(help='"matchExpressions is a list of label selector requirements. The requirements are ANDed."'),
                matchExpressions: {
                  '#withKey':: d.fn(help='"key is the label key that the selector applies to."', args=[d.arg(name='key', type=d.T.string)]),
                  withKey(key): { key: key },
                  '#withOperator':: d.fn(help="\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"", args=[d.arg(name='operator', type=d.T.string)]),
                  withOperator(operator): { operator: operator },
                  '#withValues':: d.fn(help='"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."', args=[d.arg(name='values', type=d.T.array)]),
                  withValues(values): { values: if std.isArray(v=values) then values else [values] },
                  '#withValuesMixin':: d.fn(help='"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
                  withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
                },
                '#withMatchExpressions':: d.fn(help='"matchExpressions is a list of label selector requirements. The requirements are ANDed."', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                withMatchExpressions(matchExpressions): { spec+: { storage+: { spec+: { minIO+: { volumeClaimTemplate+: { spec+: { selector+: { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } } } } } } } },
                '#withMatchExpressionsMixin':: d.fn(help='"matchExpressions is a list of label selector requirements. The requirements are ANDed."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                withMatchExpressionsMixin(matchExpressions): { spec+: { storage+: { spec+: { minIO+: { volumeClaimTemplate+: { spec+: { selector+: { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } } } } } } } },
                '#withMatchLabels':: d.fn(help='"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\"key\\", the operator is \\"In\\", and the values array contains only \\"value\\". The requirements are ANDed."', args=[d.arg(name='matchLabels', type=d.T.object)]),
                withMatchLabels(matchLabels): { spec+: { storage+: { spec+: { minIO+: { volumeClaimTemplate+: { spec+: { selector+: { matchLabels: matchLabels } } } } } } } },
                '#withMatchLabelsMixin':: d.fn(help='"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\"key\\", the operator is \\"In\\", and the values array contains only \\"value\\". The requirements are ANDed."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabels', type=d.T.object)]),
                withMatchLabelsMixin(matchLabels): { spec+: { storage+: { spec+: { minIO+: { volumeClaimTemplate+: { spec+: { selector+: { matchLabels+: matchLabels } } } } } } } },
              },
              '#withAccessModes':: d.fn(help='"AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1"', args=[d.arg(name='accessModes', type=d.T.array)]),
              withAccessModes(accessModes): { spec+: { storage+: { spec+: { minIO+: { volumeClaimTemplate+: { spec+: { accessModes: if std.isArray(v=accessModes) then accessModes else [accessModes] } } } } } } },
              '#withAccessModesMixin':: d.fn(help='"AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='accessModes', type=d.T.array)]),
              withAccessModesMixin(accessModes): { spec+: { storage+: { spec+: { minIO+: { volumeClaimTemplate+: { spec+: { accessModes+: if std.isArray(v=accessModes) then accessModes else [accessModes] } } } } } } },
              '#withStorageClassName':: d.fn(help='"Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1"', args=[d.arg(name='storageClassName', type=d.T.string)]),
              withStorageClassName(storageClassName): { spec+: { storage+: { spec+: { minIO+: { volumeClaimTemplate+: { spec+: { storageClassName: storageClassName } } } } } } },
              '#withVolumeMode':: d.fn(help='"volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec."', args=[d.arg(name='volumeMode', type=d.T.string)]),
              withVolumeMode(volumeMode): { spec+: { storage+: { spec+: { minIO+: { volumeClaimTemplate+: { spec+: { volumeMode: volumeMode } } } } } } },
              '#withVolumeName':: d.fn(help='"VolumeName is the binding reference to the PersistentVolume backing this claim."', args=[d.arg(name='volumeName', type=d.T.string)]),
              withVolumeName(volumeName): { spec+: { storage+: { spec+: { minIO+: { volumeClaimTemplate+: { spec+: { volumeName: volumeName } } } } } } },
            },
            '#status':: d.obj(help='"Status represents the current information/status of a persistent volume claim. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims"'),
            status: {
              '#conditions':: d.obj(help="\"Current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'ResizeStarted'.\""),
              conditions: {
                '#withLastProbeTime':: d.fn(help='"Last time we probed the condition."', args=[d.arg(name='lastProbeTime', type=d.T.string)]),
                withLastProbeTime(lastProbeTime): { lastProbeTime: lastProbeTime },
                '#withLastTransitionTime':: d.fn(help='"Last time the condition transitioned from one status to another."', args=[d.arg(name='lastTransitionTime', type=d.T.string)]),
                withLastTransitionTime(lastTransitionTime): { lastTransitionTime: lastTransitionTime },
                '#withMessage':: d.fn(help='"Human-readable message indicating details about last transition."', args=[d.arg(name='message', type=d.T.string)]),
                withMessage(message): { message: message },
                '#withReason':: d.fn(help="\"Unique, this should be a short, machine understandable string that gives the reason for condition's last transition. If it reports \\\"ResizeStarted\\\" that means the underlying persistent volume is being resized.\"", args=[d.arg(name='reason', type=d.T.string)]),
                withReason(reason): { reason: reason },
                '#withStatus':: d.fn(help='', args=[d.arg(name='status', type=d.T.string)]),
                withStatus(status): { status: status },
                '#withType':: d.fn(help='"PersistentVolumeClaimConditionType is a valid value of PersistentVolumeClaimCondition.Type"', args=[d.arg(name='type', type=d.T.string)]),
                withType(type): { type: type },
              },
              '#withAccessModes':: d.fn(help='"AccessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1"', args=[d.arg(name='accessModes', type=d.T.array)]),
              withAccessModes(accessModes): { spec+: { storage+: { spec+: { minIO+: { volumeClaimTemplate+: { status+: { accessModes: if std.isArray(v=accessModes) then accessModes else [accessModes] } } } } } } },
              '#withAccessModesMixin':: d.fn(help='"AccessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='accessModes', type=d.T.array)]),
              withAccessModesMixin(accessModes): { spec+: { storage+: { spec+: { minIO+: { volumeClaimTemplate+: { status+: { accessModes+: if std.isArray(v=accessModes) then accessModes else [accessModes] } } } } } } },
              '#withAllocatedResources':: d.fn(help='"The storage resource within AllocatedResources tracks the capacity allocated to a PVC. It may be larger than the actual capacity when a volume expansion operation is requested. For storage quota, the larger value from allocatedResources and PVC.spec.resources is used. If allocatedResources is not set, PVC.spec.resources alone is used for quota calculation. If a volume expansion capacity request is lowered, allocatedResources is only lowered if there are no expansion operations in progress and if the actual volume capacity is equal or lower than the requested capacity. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature."', args=[d.arg(name='allocatedResources', type=d.T.object)]),
              withAllocatedResources(allocatedResources): { spec+: { storage+: { spec+: { minIO+: { volumeClaimTemplate+: { status+: { allocatedResources: allocatedResources } } } } } } },
              '#withAllocatedResourcesMixin':: d.fn(help='"The storage resource within AllocatedResources tracks the capacity allocated to a PVC. It may be larger than the actual capacity when a volume expansion operation is requested. For storage quota, the larger value from allocatedResources and PVC.spec.resources is used. If allocatedResources is not set, PVC.spec.resources alone is used for quota calculation. If a volume expansion capacity request is lowered, allocatedResources is only lowered if there are no expansion operations in progress and if the actual volume capacity is equal or lower than the requested capacity. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='allocatedResources', type=d.T.object)]),
              withAllocatedResourcesMixin(allocatedResources): { spec+: { storage+: { spec+: { minIO+: { volumeClaimTemplate+: { status+: { allocatedResources+: allocatedResources } } } } } } },
              '#withCapacity':: d.fn(help='"Represents the actual resources of the underlying volume."', args=[d.arg(name='capacity', type=d.T.object)]),
              withCapacity(capacity): { spec+: { storage+: { spec+: { minIO+: { volumeClaimTemplate+: { status+: { capacity: capacity } } } } } } },
              '#withCapacityMixin':: d.fn(help='"Represents the actual resources of the underlying volume."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='capacity', type=d.T.object)]),
              withCapacityMixin(capacity): { spec+: { storage+: { spec+: { minIO+: { volumeClaimTemplate+: { status+: { capacity+: capacity } } } } } } },
              '#withConditions':: d.fn(help="\"Current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'ResizeStarted'.\"", args=[d.arg(name='conditions', type=d.T.array)]),
              withConditions(conditions): { spec+: { storage+: { spec+: { minIO+: { volumeClaimTemplate+: { status+: { conditions: if std.isArray(v=conditions) then conditions else [conditions] } } } } } } },
              '#withConditionsMixin':: d.fn(help="\"Current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'ResizeStarted'.\"\n\n**Note:** This function appends passed data to existing values", args=[d.arg(name='conditions', type=d.T.array)]),
              withConditionsMixin(conditions): { spec+: { storage+: { spec+: { minIO+: { volumeClaimTemplate+: { status+: { conditions+: if std.isArray(v=conditions) then conditions else [conditions] } } } } } } },
              '#withPhase':: d.fn(help='"Phase represents the current phase of PersistentVolumeClaim."', args=[d.arg(name='phase', type=d.T.string)]),
              withPhase(phase): { spec+: { storage+: { spec+: { minIO+: { volumeClaimTemplate+: { status+: { phase: phase } } } } } } },
              '#withResizeStatus':: d.fn(help='"ResizeStatus stores status of resize operation. ResizeStatus is not set by default but when expansion is complete resizeStatus is set to empty string by resize controller or kubelet. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature."', args=[d.arg(name='resizeStatus', type=d.T.string)]),
              withResizeStatus(resizeStatus): { spec+: { storage+: { spec+: { minIO+: { volumeClaimTemplate+: { status+: { resizeStatus: resizeStatus } } } } } } },
            },
            '#withApiVersion':: d.fn(help='"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"', args=[d.arg(name='apiVersion', type=d.T.string)]),
            withApiVersion(apiVersion): { spec+: { storage+: { spec+: { minIO+: { volumeClaimTemplate+: { apiVersion: apiVersion } } } } } },
            '#withKind':: d.fn(help='"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"', args=[d.arg(name='kind', type=d.T.string)]),
            withKind(kind): { spec+: { storage+: { spec+: { minIO+: { volumeClaimTemplate+: { kind: kind } } } } } },
            '#withMetadata':: d.fn(help="\"Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\"", args=[d.arg(name='metadata', type=d.T.object)]),
            withMetadata(metadata): { spec+: { storage+: { spec+: { minIO+: { volumeClaimTemplate+: { metadata: metadata } } } } } },
            '#withMetadataMixin':: d.fn(help="\"Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\"\n\n**Note:** This function appends passed data to existing values", args=[d.arg(name='metadata', type=d.T.object)]),
            withMetadataMixin(metadata): { spec+: { storage+: { spec+: { minIO+: { volumeClaimTemplate+: { metadata+: metadata } } } } } },
          },
          '#withImage':: d.fn(help='"Image name for the component."', args=[d.arg(name='image', type=d.T.string)]),
          withImage(image): { spec+: { storage+: { spec+: { minIO+: { image: image } } } } },
          '#withImagePullPolicy':: d.fn(help='"Image pull policy. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images"', args=[d.arg(name='imagePullPolicy', type=d.T.string)]),
          withImagePullPolicy(imagePullPolicy): { spec+: { storage+: { spec+: { minIO+: { imagePullPolicy: imagePullPolicy } } } } },
          '#withImagePullSecrets':: d.fn(help='', args=[d.arg(name='imagePullSecrets', type=d.T.array)]),
          withImagePullSecrets(imagePullSecrets): { spec+: { storage+: { spec+: { minIO+: { imagePullSecrets: if std.isArray(v=imagePullSecrets) then imagePullSecrets else [imagePullSecrets] } } } } },
          '#withImagePullSecretsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='imagePullSecrets', type=d.T.array)]),
          withImagePullSecretsMixin(imagePullSecrets): { spec+: { storage+: { spec+: { minIO+: { imagePullSecrets+: if std.isArray(v=imagePullSecrets) then imagePullSecrets else [imagePullSecrets] } } } } },
          '#withOperatorVersion':: d.fn(help='"the version of minIO operator"', args=[d.arg(name='operatorVersion', type=d.T.string)]),
          withOperatorVersion(operatorVersion): { spec+: { storage+: { spec+: { minIO+: { operatorVersion: operatorVersion } } } } },
          '#withReplicas':: d.fn(help='"Supply number of replicas. For standalone mode, supply 1. For distributed mode, supply 4 to 16 drives (should be even). Note that the operator does not support upgrading from standalone to distributed mode."', args=[d.arg(name='replicas', type=d.T.integer)]),
          withReplicas(replicas): { spec+: { storage+: { spec+: { minIO+: { replicas: replicas } } } } },
          '#withSecretRef':: d.fn(help='"Reference to the secret containing the MinIO access key and secret key."', args=[d.arg(name='secretRef', type=d.T.string)]),
          withSecretRef(secretRef): { spec+: { storage+: { spec+: { minIO+: { secretRef: secretRef } } } } },
          '#withVolumesPerServer':: d.fn(help='"Number of persistent volumes that will be attached per server"', args=[d.arg(name='volumesPerServer', type=d.T.integer)]),
          withVolumesPerServer(volumesPerServer): { spec+: { storage+: { spec+: { minIO+: { volumesPerServer: volumesPerServer } } } } },
        },
        '#redirect':: d.obj(help='"Determine if the redirection of minio storage is disabled."'),
        redirect: {
          '#expose':: d.obj(help=''),
          expose: {
            '#ingress':: d.obj(help=''),
            ingress: {
              '#withAnnotations':: d.fn(help='', args=[d.arg(name='annotations', type=d.T.object)]),
              withAnnotations(annotations): { spec+: { storage+: { spec+: { redirect+: { expose+: { ingress+: { annotations: annotations } } } } } } },
              '#withAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
              withAnnotationsMixin(annotations): { spec+: { storage+: { spec+: { redirect+: { expose+: { ingress+: { annotations+: annotations } } } } } } },
              '#withController':: d.fn(help='"Set to the type of ingress controller."', args=[d.arg(name='controller', type=d.T.string)]),
              withController(controller): { spec+: { storage+: { spec+: { redirect+: { expose+: { ingress+: { controller: controller } } } } } } },
              '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
              withHost(host): { spec+: { storage+: { spec+: { redirect+: { expose+: { ingress+: { host: host } } } } } } },
              '#withIngressClassName':: d.fn(help='', args=[d.arg(name='ingressClassName', type=d.T.string)]),
              withIngressClassName(ingressClassName): { spec+: { storage+: { spec+: { redirect+: { expose+: { ingress+: { ingressClassName: ingressClassName } } } } } } },
            },
            '#tls':: d.obj(help=''),
            tls: {
              '#withCertificateRef':: d.fn(help='', args=[d.arg(name='certificateRef', type=d.T.string)]),
              withCertificateRef(certificateRef): { spec+: { storage+: { spec+: { redirect+: { expose+: { tls+: { certificateRef: certificateRef } } } } } } },
            },
          },
          '#withEnable':: d.fn(help='"Default is true"', args=[d.arg(name='enable', type=d.T.boolean)]),
          withEnable(enable): { spec+: { storage+: { spec+: { redirect+: { enable: enable } } } } },
        },
        '#s3':: d.obj(help=''),
        s3: {
          '#withAccesskey':: d.fn(help='"The AWS Access Key. If you use IAM roles, omit to fetch temporary credentials from IAM."', args=[d.arg(name='accesskey', type=d.T.string)]),
          withAccesskey(accesskey): { spec+: { storage+: { spec+: { s3+: { accesskey: accesskey } } } } },
          '#withBucket':: d.fn(help='"The bucket name in which you want to store the registry’s data."', args=[d.arg(name='bucket', type=d.T.string)]),
          withBucket(bucket): { spec+: { storage+: { spec+: { s3+: { bucket: bucket } } } } },
          '#withCertificateRef':: d.fn(help='', args=[d.arg(name='certificateRef', type=d.T.string)]),
          withCertificateRef(certificateRef): { spec+: { storage+: { spec+: { s3+: { certificateRef: certificateRef } } } } },
          '#withChunksize':: d.fn(help='"The S3 API requires multipart upload chunks to be at least 5MB."', args=[d.arg(name='chunksize', type=d.T.integer)]),
          withChunksize(chunksize): { spec+: { storage+: { spec+: { s3+: { chunksize: chunksize } } } } },
          '#withEncrypt':: d.fn(help='"Specifies whether the registry stores the image in encrypted format or not. A boolean value."', args=[d.arg(name='encrypt', type=d.T.boolean)]),
          withEncrypt(encrypt): { spec+: { storage+: { spec+: { s3+: { encrypt: encrypt } } } } },
          '#withKeyid':: d.fn(help='"KMS key ID to use for encryption (encrypt must be true, or this parameter is ignored)."', args=[d.arg(name='keyid', type=d.T.string)]),
          withKeyid(keyid): { spec+: { storage+: { spec+: { s3+: { keyid: keyid } } } } },
          '#withMultipartcopychunksize':: d.fn(help='', args=[d.arg(name='multipartcopychunksize', type=d.T.integer)]),
          withMultipartcopychunksize(multipartcopychunksize): { spec+: { storage+: { spec+: { s3+: { multipartcopychunksize: multipartcopychunksize } } } } },
          '#withMultipartcopymaxconcurrency':: d.fn(help='', args=[d.arg(name='multipartcopymaxconcurrency', type=d.T.integer)]),
          withMultipartcopymaxconcurrency(multipartcopymaxconcurrency): { spec+: { storage+: { spec+: { s3+: { multipartcopymaxconcurrency: multipartcopymaxconcurrency } } } } },
          '#withMultipartcopythresholdsize':: d.fn(help='', args=[d.arg(name='multipartcopythresholdsize', type=d.T.integer)]),
          withMultipartcopythresholdsize(multipartcopythresholdsize): { spec+: { storage+: { spec+: { s3+: { multipartcopythresholdsize: multipartcopythresholdsize } } } } },
          '#withRegion':: d.fn(help='"The AWS region in which your bucket exists. For the moment, the Go AWS library in use does not use the newer DNS based bucket routing. For a list of regions, see http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html"', args=[d.arg(name='region', type=d.T.string)]),
          withRegion(region): { spec+: { storage+: { spec+: { s3+: { region: region } } } } },
          '#withRegionendpoint':: d.fn(help='"Endpoint for S3 compatible storage services (Minio, etc)."', args=[d.arg(name='regionendpoint', type=d.T.string)]),
          withRegionendpoint(regionendpoint): { spec+: { storage+: { spec+: { s3+: { regionendpoint: regionendpoint } } } } },
          '#withRootdirectory':: d.fn(help='"This is a prefix that is applied to all S3 keys to allow you to segment data in your bucket if necessary."', args=[d.arg(name='rootdirectory', type=d.T.string)]),
          withRootdirectory(rootdirectory): { spec+: { storage+: { spec+: { s3+: { rootdirectory: rootdirectory } } } } },
          '#withSecretkeyRef':: d.fn(help='"Reference to the secret containing the AWS Secret Key. If you use IAM roles, omit to fetch temporary credentials from IAM."', args=[d.arg(name='secretkeyRef', type=d.T.string)]),
          withSecretkeyRef(secretkeyRef): { spec+: { storage+: { spec+: { s3+: { secretkeyRef: secretkeyRef } } } } },
          '#withSecure':: d.fn(help='', args=[d.arg(name='secure', type=d.T.boolean)]),
          withSecure(secure): { spec+: { storage+: { spec+: { s3+: { secure: secure } } } } },
          '#withSkipverify':: d.fn(help='"Skips TLS verification when the value is set to true."', args=[d.arg(name='skipverify', type=d.T.boolean)]),
          withSkipverify(skipverify): { spec+: { storage+: { spec+: { s3+: { skipverify: skipverify } } } } },
          '#withStorageclass':: d.fn(help='"The S3 storage class applied to each registry file."', args=[d.arg(name='storageclass', type=d.T.string)]),
          withStorageclass(storageclass): { spec+: { storage+: { spec+: { s3+: { storageclass: storageclass } } } } },
          '#withV4auth':: d.fn(help='"Indicates whether the registry uses Version 4 of AWS’s authentication."', args=[d.arg(name='v4auth', type=d.T.boolean)]),
          withV4auth(v4auth): { spec+: { storage+: { spec+: { s3+: { v4auth: v4auth } } } } },
        },
        '#swift':: d.obj(help=''),
        swift: {
          '#withAccesskey':: d.fn(help='"The access key to generate temporary URLs. It is used by HP Cloud Object Storage in addition to the secretkey parameter."', args=[d.arg(name='accesskey', type=d.T.string)]),
          withAccesskey(accesskey): { spec+: { storage+: { spec+: { swift+: { accesskey: accesskey } } } } },
          '#withAuthurl':: d.fn(help='"URL for obtaining an auth token. https://storage.myprovider.com/v2.0 or https://storage.myprovider.com/v3/auth"', args=[d.arg(name='authurl', type=d.T.string)]),
          withAuthurl(authurl): { spec+: { storage+: { spec+: { swift+: { authurl: authurl } } } } },
          '#withAuthversion':: d.fn(help='"Specify the OpenStack Auth’s version, for example 3. By default the driver autodetects the auth’s version from the authurl."', args=[d.arg(name='authversion', type=d.T.string)]),
          withAuthversion(authversion): { spec+: { storage+: { spec+: { swift+: { authversion: authversion } } } } },
          '#withChunksize':: d.fn(help='"Size of the data segments for the Swift Dynamic Large Objects. This value should be a number."', args=[d.arg(name='chunksize', type=d.T.integer)]),
          withChunksize(chunksize): { spec+: { storage+: { spec+: { swift+: { chunksize: chunksize } } } } },
          '#withContainer':: d.fn(help='"The name of your Swift container where you wish to store the registry’s data. The driver creates the named container during its initialization."', args=[d.arg(name='container', type=d.T.string)]),
          withContainer(container): { spec+: { storage+: { spec+: { swift+: { container: container } } } } },
          '#withDomain':: d.fn(help='"Your Openstack domain name for Identity v3 API. You can either use domain or domainid."', args=[d.arg(name='domain', type=d.T.string)]),
          withDomain(domain): { spec+: { storage+: { spec+: { swift+: { domain: domain } } } } },
          '#withDomainID':: d.fn(help='"Your Openstack domain ID for Identity v3 API. You can either use domain or domainid."', args=[d.arg(name='domainID', type=d.T.string)]),
          withDomainID(domainID): { spec+: { storage+: { spec+: { swift+: { domainID: domainID } } } } },
          '#withEndpointtype':: d.fn(help='"The endpoint type used when connecting to swift."', args=[d.arg(name='endpointtype', type=d.T.string)]),
          withEndpointtype(endpointtype): { spec+: { storage+: { spec+: { swift+: { endpointtype: endpointtype } } } } },
          '#withInsecureskipverify':: d.fn(help='"Skips TLS verification if the value is set to true."', args=[d.arg(name='insecureskipverify', type=d.T.boolean)]),
          withInsecureskipverify(insecureskipverify): { spec+: { storage+: { spec+: { swift+: { insecureskipverify: insecureskipverify } } } } },
          '#withPasswordRef':: d.fn(help='"Secret name containing the Openstack password."', args=[d.arg(name='passwordRef', type=d.T.string)]),
          withPasswordRef(passwordRef): { spec+: { storage+: { spec+: { swift+: { passwordRef: passwordRef } } } } },
          '#withPrefix':: d.fn(help='"This is a prefix that is applied to all Swift keys to allow you to segment data in your container if necessary. Defaults to the container’s root."', args=[d.arg(name='prefix', type=d.T.string)]),
          withPrefix(prefix): { spec+: { storage+: { spec+: { swift+: { prefix: prefix } } } } },
          '#withRegion':: d.fn(help='"The Openstack region in which your container exists."', args=[d.arg(name='region', type=d.T.string)]),
          withRegion(region): { spec+: { storage+: { spec+: { swift+: { region: region } } } } },
          '#withSecretkeyRef':: d.fn(help='"The secret key used to generate temporary URLs."', args=[d.arg(name='secretkeyRef', type=d.T.string)]),
          withSecretkeyRef(secretkeyRef): { spec+: { storage+: { spec+: { swift+: { secretkeyRef: secretkeyRef } } } } },
          '#withTenant':: d.fn(help='"Your Openstack tenant name. You can either use tenant or tenantid."', args=[d.arg(name='tenant', type=d.T.string)]),
          withTenant(tenant): { spec+: { storage+: { spec+: { swift+: { tenant: tenant } } } } },
          '#withTenantID':: d.fn(help='"Your Openstack tenant ID. You can either use tenant or tenantid."', args=[d.arg(name='tenantID', type=d.T.string)]),
          withTenantID(tenantID): { spec+: { storage+: { spec+: { swift+: { tenantID: tenantID } } } } },
          '#withTrustid':: d.fn(help='"Your Openstack trust ID for Identity v3 API."', args=[d.arg(name='trustid', type=d.T.string)]),
          withTrustid(trustid): { spec+: { storage+: { spec+: { swift+: { trustid: trustid } } } } },
          '#withUsername':: d.fn(help='"The Openstack user name."', args=[d.arg(name='username', type=d.T.string)]),
          withUsername(username): { spec+: { storage+: { spec+: { swift+: { username: username } } } } },
        },
      },
      '#withKind':: d.fn(help='"Kind of which storage service to be used. Only support MinIO now."', args=[d.arg(name='kind', type=d.T.string)]),
      withKind(kind): { spec+: { storage+: { kind: kind } } },
    },
    '#trace':: d.obj(help='"Trace settings for the harbor"'),
    trace: {
      '#jaeger':: d.obj(help=''),
      jaeger: {
        '#agent':: d.obj(help=''),
        agent: {
          '#withHost':: d.fn(help='"The host of the jaeger agent."', args=[d.arg(name='host', type=d.T.string)]),
          withHost(host): { spec+: { trace+: { jaeger+: { agent+: { host: host } } } } },
          '#withPort':: d.fn(help='"The port of the jaeger agent."', args=[d.arg(name='port', type=d.T.integer)]),
          withPort(port): { spec+: { trace+: { jaeger+: { agent+: { port: port } } } } },
        },
        '#collector':: d.obj(help=''),
        collector: {
          '#withEndpoint':: d.fn(help='"The endpoint of the jaeger collector."', args=[d.arg(name='endpoint', type=d.T.string)]),
          withEndpoint(endpoint): { spec+: { trace+: { jaeger+: { collector+: { endpoint: endpoint } } } } },
          '#withPasswordRef':: d.fn(help='"The password secret reference name of the jaeger collector."', args=[d.arg(name='passwordRef', type=d.T.string)]),
          withPasswordRef(passwordRef): { spec+: { trace+: { jaeger+: { collector+: { passwordRef: passwordRef } } } } },
          '#withUsername':: d.fn(help='"The username of the jaeger collector."', args=[d.arg(name='username', type=d.T.string)]),
          withUsername(username): { spec+: { trace+: { jaeger+: { collector+: { username: username } } } } },
        },
        '#withMode':: d.fn(help="\"The jaeger mode: 'collector' or 'agent'.\"", args=[d.arg(name='mode', type=d.T.string)]),
        withMode(mode): { spec+: { trace+: { jaeger+: { mode: mode } } } },
      },
      '#otel':: d.obj(help=''),
      otel: {
        '#withCompression':: d.fn(help='"Whether enable compression or not for otel."', args=[d.arg(name='compression', type=d.T.boolean)]),
        withCompression(compression): { spec+: { trace+: { otel+: { compression: compression } } } },
        '#withEndpoint':: d.fn(help='"The endpoint of otel."', args=[d.arg(name='endpoint', type=d.T.string)]),
        withEndpoint(endpoint): { spec+: { trace+: { otel+: { endpoint: endpoint } } } },
        '#withInsecure':: d.fn(help='"Whether establish insecure connection or not for otel."', args=[d.arg(name='insecure', type=d.T.boolean)]),
        withInsecure(insecure): { spec+: { trace+: { otel+: { insecure: insecure } } } },
        '#withTimeout':: d.fn(help='"The timeout of otel."', args=[d.arg(name='timeout', type=d.T.string)]),
        withTimeout(timeout): { spec+: { trace+: { otel+: { timeout: timeout } } } },
        '#withUrlPath':: d.fn(help='"The URL path of otel."', args=[d.arg(name='urlPath', type=d.T.string)]),
        withUrlPath(urlPath): { spec+: { trace+: { otel+: { urlPath: urlPath } } } },
      },
      '#withAttributes':: d.fn(help='"A key value dict contains user defined attributes used to initialize trace provider."', args=[d.arg(name='attributes', type=d.T.object)]),
      withAttributes(attributes): { spec+: { trace+: { attributes: attributes } } },
      '#withAttributesMixin':: d.fn(help='"A key value dict contains user defined attributes used to initialize trace provider."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='attributes', type=d.T.object)]),
      withAttributesMixin(attributes): { spec+: { trace+: { attributes+: attributes } } },
      '#withEnabled':: d.fn(help='"Enable tracing or not."', args=[d.arg(name='enabled', type=d.T.boolean)]),
      withEnabled(enabled): { spec+: { trace+: { enabled: enabled } } },
      '#withNamespace':: d.fn(help='"Namespace used to differentiate different harbor services."', args=[d.arg(name='namespace', type=d.T.string)]),
      withNamespace(namespace): { spec+: { trace+: { namespace: namespace } } },
      '#withProvider':: d.fn(help="\"The tracing provider: 'jaeger' or 'otel'.\"", args=[d.arg(name='provider', type=d.T.string)]),
      withProvider(provider): { spec+: { trace+: { provider: provider } } },
      '#withSampleRate':: d.fn(help='"Set `sampleRate` to 1 if you wanna sampling 100% of trace data; set 0.5 if you wanna sampling 50% of trace data, and so forth."', args=[d.arg(name='sampleRate', type=d.T.integer)]),
      withSampleRate(sampleRate): { spec+: { trace+: { sampleRate: sampleRate } } },
    },
    '#trivy':: d.obj(help=''),
    trivy: {
      '#imagePullSecrets':: d.obj(help=''),
      imagePullSecrets: {
        '#withName':: d.fn(help='"Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?"', args=[d.arg(name='name', type=d.T.string)]),
        withName(name): { name: name },
      },
      '#resources':: d.obj(help='"Compute Resources required by this component. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/"'),
      resources: {
        '#withLimits':: d.fn(help='"Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/"', args=[d.arg(name='limits', type=d.T.object)]),
        withLimits(limits): { spec+: { trivy+: { resources+: { limits: limits } } } },
        '#withLimitsMixin':: d.fn(help='"Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='limits', type=d.T.object)]),
        withLimitsMixin(limits): { spec+: { trivy+: { resources+: { limits+: limits } } } },
        '#withRequests':: d.fn(help='"Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/"', args=[d.arg(name='requests', type=d.T.object)]),
        withRequests(requests): { spec+: { trivy+: { resources+: { requests: requests } } } },
        '#withRequestsMixin':: d.fn(help='"Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='requests', type=d.T.object)]),
        withRequestsMixin(requests): { spec+: { trivy+: { resources+: { requests+: requests } } } },
      },
      '#storage':: d.obj(help=''),
      storage: {
        '#cachePersistentVolume':: d.obj(help='"CachePersistentVolume specify the persistent volume used to store Trivy cache. If empty, empty dir will be used."'),
        cachePersistentVolume: {
          '#withClaimName':: d.fn(help='"ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims"', args=[d.arg(name='claimName', type=d.T.string)]),
          withClaimName(claimName): { spec+: { trivy+: { storage+: { cachePersistentVolume+: { claimName: claimName } } } } },
          '#withPrefix':: d.fn(help='', args=[d.arg(name='prefix', type=d.T.string)]),
          withPrefix(prefix): { spec+: { trivy+: { storage+: { cachePersistentVolume+: { prefix: prefix } } } } },
          '#withReadOnly':: d.fn(help='"Will force the ReadOnly setting in VolumeMounts. Default false."', args=[d.arg(name='readOnly', type=d.T.boolean)]),
          withReadOnly(readOnly): { spec+: { trivy+: { storage+: { cachePersistentVolume+: { readOnly: readOnly } } } } },
        },
        '#reportsPersistentVolume':: d.obj(help='"ReportsPersistentVolume specify the persistent volume used to store Trivy reports. If empty, empty dir will be used."'),
        reportsPersistentVolume: {
          '#withClaimName':: d.fn(help='"ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims"', args=[d.arg(name='claimName', type=d.T.string)]),
          withClaimName(claimName): { spec+: { trivy+: { storage+: { reportsPersistentVolume+: { claimName: claimName } } } } },
          '#withPrefix':: d.fn(help='', args=[d.arg(name='prefix', type=d.T.string)]),
          withPrefix(prefix): { spec+: { trivy+: { storage+: { reportsPersistentVolume+: { prefix: prefix } } } } },
          '#withReadOnly':: d.fn(help='"Will force the ReadOnly setting in VolumeMounts. Default false."', args=[d.arg(name='readOnly', type=d.T.boolean)]),
          withReadOnly(readOnly): { spec+: { trivy+: { storage+: { reportsPersistentVolume+: { readOnly: readOnly } } } } },
        },
      },
      '#tolerations':: d.obj(help="\"If specified, the pod's tolerations.\""),
      tolerations: {
        '#withEffect':: d.fn(help='"Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute."', args=[d.arg(name='effect', type=d.T.string)]),
        withEffect(effect): { effect: effect },
        '#withKey':: d.fn(help='"Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys."', args=[d.arg(name='key', type=d.T.string)]),
        withKey(key): { key: key },
        '#withOperator':: d.fn(help="\"Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.\"", args=[d.arg(name='operator', type=d.T.string)]),
        withOperator(operator): { operator: operator },
        '#withTolerationSeconds':: d.fn(help='"TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system."', args=[d.arg(name='tolerationSeconds', type=d.T.integer)]),
        withTolerationSeconds(tolerationSeconds): { tolerationSeconds: tolerationSeconds },
        '#withValue':: d.fn(help='"Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string."', args=[d.arg(name='value', type=d.T.string)]),
        withValue(value): { value: value },
      },
      '#withCertificateRefs':: d.fn(help='', args=[d.arg(name='certificateRefs', type=d.T.array)]),
      withCertificateRefs(certificateRefs): { spec+: { trivy+: { certificateRefs: if std.isArray(v=certificateRefs) then certificateRefs else [certificateRefs] } } },
      '#withCertificateRefsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='certificateRefs', type=d.T.array)]),
      withCertificateRefsMixin(certificateRefs): { spec+: { trivy+: { certificateRefs+: if std.isArray(v=certificateRefs) then certificateRefs else [certificateRefs] } } },
      '#withGithubTokenRef':: d.fn(help='"The name of the secret containing the token to connect to GitHub API."', args=[d.arg(name='githubTokenRef', type=d.T.string)]),
      withGithubTokenRef(githubTokenRef): { spec+: { trivy+: { githubTokenRef: githubTokenRef } } },
      '#withImage':: d.fn(help='"Image name for the component."', args=[d.arg(name='image', type=d.T.string)]),
      withImage(image): { spec+: { trivy+: { image: image } } },
      '#withImagePullPolicy':: d.fn(help='"Image pull policy. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images"', args=[d.arg(name='imagePullPolicy', type=d.T.string)]),
      withImagePullPolicy(imagePullPolicy): { spec+: { trivy+: { imagePullPolicy: imagePullPolicy } } },
      '#withImagePullSecrets':: d.fn(help='', args=[d.arg(name='imagePullSecrets', type=d.T.array)]),
      withImagePullSecrets(imagePullSecrets): { spec+: { trivy+: { imagePullSecrets: if std.isArray(v=imagePullSecrets) then imagePullSecrets else [imagePullSecrets] } } },
      '#withImagePullSecretsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='imagePullSecrets', type=d.T.array)]),
      withImagePullSecretsMixin(imagePullSecrets): { spec+: { trivy+: { imagePullSecrets+: if std.isArray(v=imagePullSecrets) then imagePullSecrets else [imagePullSecrets] } } },
      '#withNodeSelector':: d.fn(help="\"NodeSelector is a selector which must be true for the component to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\"", args=[d.arg(name='nodeSelector', type=d.T.object)]),
      withNodeSelector(nodeSelector): { spec+: { trivy+: { nodeSelector: nodeSelector } } },
      '#withNodeSelectorMixin':: d.fn(help="\"NodeSelector is a selector which must be true for the component to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\"\n\n**Note:** This function appends passed data to existing values", args=[d.arg(name='nodeSelector', type=d.T.object)]),
      withNodeSelectorMixin(nodeSelector): { spec+: { trivy+: { nodeSelector+: nodeSelector } } },
      '#withOfflineScan':: d.fn(help='"Option prevents Trivy from sending API requests to identify dependencies. This option doesn’t affect DB download. You need to specify \\"skip-update\\" as well as \\"offline-scan\\" in an air-gapped environment."', args=[d.arg(name='offlineScan', type=d.T.boolean)]),
      withOfflineScan(offlineScan): { spec+: { trivy+: { offlineScan: offlineScan } } },
      '#withReplicas':: d.fn(help='"Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller"', args=[d.arg(name='replicas', type=d.T.integer)]),
      withReplicas(replicas): { spec+: { trivy+: { replicas: replicas } } },
      '#withServiceAccountName':: d.fn(help='"ServiceAccountName is the name of the ServiceAccount to use to run this component. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/"', args=[d.arg(name='serviceAccountName', type=d.T.string)]),
      withServiceAccountName(serviceAccountName): { spec+: { trivy+: { serviceAccountName: serviceAccountName } } },
      '#withSkipUpdate':: d.fn(help='"The flag to enable or disable Trivy DB downloads from GitHub"', args=[d.arg(name='skipUpdate', type=d.T.boolean)]),
      withSkipUpdate(skipUpdate): { spec+: { trivy+: { skipUpdate: skipUpdate } } },
      '#withTolerations':: d.fn(help="\"If specified, the pod's tolerations.\"", args=[d.arg(name='tolerations', type=d.T.array)]),
      withTolerations(tolerations): { spec+: { trivy+: { tolerations: if std.isArray(v=tolerations) then tolerations else [tolerations] } } },
      '#withTolerationsMixin':: d.fn(help="\"If specified, the pod's tolerations.\"\n\n**Note:** This function appends passed data to existing values", args=[d.arg(name='tolerations', type=d.T.array)]),
      withTolerationsMixin(tolerations): { spec+: { trivy+: { tolerations+: if std.isArray(v=tolerations) then tolerations else [tolerations] } } },
    },
    '#withExternalURL':: d.fn(help='', args=[d.arg(name='externalURL', type=d.T.string)]),
    withExternalURL(externalURL): { spec+: { externalURL: externalURL } },
    '#withHarborAdminPasswordRef':: d.fn(help='', args=[d.arg(name='harborAdminPasswordRef', type=d.T.string)]),
    withHarborAdminPasswordRef(harborAdminPasswordRef): { spec+: { harborAdminPasswordRef: harborAdminPasswordRef } },
    '#withLogLevel':: d.fn(help='"HarborLogLevel is the log level for Harbor."', args=[d.arg(name='logLevel', type=d.T.string)]),
    withLogLevel(logLevel): { spec+: { logLevel: logLevel } },
    '#withUpdateStrategyType':: d.fn(help='', args=[d.arg(name='updateStrategyType', type=d.T.string)]),
    withUpdateStrategyType(updateStrategyType): { spec+: { updateStrategyType: updateStrategyType } },
    '#withVersion':: d.fn(help='"The version of the harbor, eg 2.1.2"', args=[d.arg(name='version', type=d.T.string)]),
    withVersion(version): { spec+: { version: version } },
  },
  '#mixin': 'ignore',
  mixin: self,
}
